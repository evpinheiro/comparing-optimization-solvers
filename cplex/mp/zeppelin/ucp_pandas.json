{"info": {}, "config": {"looknfeel": "default", "personalizedMode": "false"}, "name": "C:\\Users\\AURELIEFolacci\\python\\workspace\\docplex\\docplex\\src\\samples\\examples\\delivery\\jupyter\\ucp_pandas", "paragraphs": [{"settings": {"forms": {}, "params": {}}, "text": "%md\n# The Unit Commitment Problem (UCP)\n\nThis tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on the cloud with IBM ILOG CPLEX Optimizer.\n\nWhen you finish this tutorial, you'll have a foundational knowledge of _Prescriptive Analytics_.\n\n>This notebook is part of [Prescriptive Analytics for Python](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html).\n\n>It requires an [installation of CPLEX Optimizers](http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html)\n\nDiscover us [here](https://developer.ibm.com/docloud)\n\n\nTable of contents:\n\n*  Describe the business problem\n*  How decision optimization (prescriptive analytics) can help\n*  Use decision optimization\n    *  Step 1: Import the library\n    *  Step 2: Model the Data\n    *  Step 3: Prepare the data\n    *  Step 4: Set up the prescriptive model\n        * Define the decision variables\n        * Express the business constraints\n        * Express the objective\n        * Solve with Decision Optimization\n    *  Step 5: Investigate the solution and run an example analysis\n*  Summary\n\n****", "apps": [], "results": {"msg": [{"data": "<h1>The Unit Commitment Problem (UCP)</h1>\n<p></p>\n<p>This tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on the cloud with IBM ILOG CPLEX Optimizer.</p>\n<p></p>\n<p>When you finish this tutorial, you'll have a foundational knowledge of <em>Prescriptive Analytics</em>.</p>\n<p></p>\n<blockquote>\n  <p>This notebook is part of <a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Prescriptive Analytics for Python</a>.</p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p>It requires an <a href=\"http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html\">installation of CPLEX Optimizers</a></p>\n</blockquote>\n<p></p>\n<p>Discover us <a href=\"https://developer.ibm.com/docloud\">here</a></p>\n<p></p>\n<p></p>\n<p>Table of contents:</p>\n<p></p>\n<ul>\n<li>Describe the business problem</li>\n</ul>\n<ul>\n<li>How decision optimization (prescriptive analytics) can help</li>\n</ul>\n<ul>\n<li>Use decision optimization</li>\n</ul>\n<pre><code>*  Step 1: Import the library\n</code></pre>\n<pre><code>*  Step 2: Model the Data\n</code></pre>\n<pre><code>*  Step 3: Prepare the data\n</code></pre>\n<pre><code>*  Step 4: Set up the prescriptive model\n</code></pre>\n<pre><code>    * Define the decision variables\n</code></pre>\n<pre><code>    * Express the business constraints\n</code></pre>\n<pre><code>    * Express the objective\n</code></pre>\n<pre><code>    * Solve with Decision Optimization\n</code></pre>\n<pre><code>*  Step 5: Investigate the solution and run an example analysis\n</code></pre>\n<ul>\n<li>Summary</li>\n</ul>\n<p></p>\n<hr />\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Describe the business problem\n\n* The Model estimates the lower cost of generating electricity within a given plan. \nDepending on the demand for electricity, we turn on or off units that generate power and which have operational properties and costs.\n\n* The Unit Commitment Problem answers the question \"Which power generators should I run at which times and at what level in order to satisfy the demand for electricity?\". This  model  helps users to find not only a feasible answer to the question, but one that also optimizes its solution to meet as many of the electricity company's overall goals as possible. \n", "apps": [], "results": {"msg": [{"data": "<h2>Describe the business problem</h2>\n<p></p>\n<ul>\n<li>The Model estimates the lower cost of generating electricity within a given plan. </li>\n</ul>\n<p>Depending on the demand for electricity, we turn on or off units that generate power and which have operational properties and costs.</p>\n<p></p>\n<ul>\n<li>The Unit Commitment Problem answers the question \"Which power generators should I run at which times and at what level in order to satisfy the demand for electricity?\". This  model  helps users to find not only a feasible answer to the question, but one that also optimizes its solution to meet as many of the electricity company's overall goals as possible. </li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## How  decision optimization can help\n\n* Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  \n\n* Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  \n\n* Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  \n<br/>\n\n<u>With prescriptive analytics, you can:</u> \n\n* Automate the complex decisions and trade-offs to better manage your limited resources.\n* Take advantage of a future opportunity or mitigate a future risk.\n* Proactively update recommendations based on changing events.\n* Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.", "apps": [], "results": {"msg": [{"data": "<h2>How  decision optimization can help</h2>\n<p></p>\n<ul>\n<li>Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  </li>\n</ul>\n<p><br/></p>\n<p></p>\n<p><u>With prescriptive analytics, you can:</u> </p>\n<p></p>\n<ul>\n<li>Automate the complex decisions and trade-offs to better manage your limited resources.</li>\n</ul>\n<ul>\n<li>Take advantage of a future opportunity or mitigate a future risk.</li>\n</ul>\n<ul>\n<li>Proactively update recommendations based on changing events.</li>\n</ul>\n<ul>\n<li>Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Checking minimum requirements\nThis notebook uses some features of *pandas* that are available in version 0.17.1 or above.", "apps": [], "results": {"msg": [{"data": "<h2>Checking minimum requirements</h2>\n<p>This notebook uses some features of <em>pandas</em> that are available in version 0.17.1 or above.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport pip\nREQUIRED_MINIMUM_PANDAS_VERSION = '0.17.1'\ntry:\n    import pandas as pd\n    assert pd.__version__ >= REQUIRED_MINIMUM_PANDAS_VERSION\nexcept:\n    raise Exception(\"Version \" + REQUIRED_MINIMUM_PANDAS_VERSION + \" or above of Pandas is required to run this notebook\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Use decision optimization", "apps": [], "results": {"msg": [{"data": "<h2>Use decision optimization</h2>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 1: Import the library\n\nRun the following code to the import the Decision Optimization CPLEX Modeling library.  The *DOcplex* library contains the two modeling packages, Mathematical Programming (*docplex.mp*) and Constraint Programming (*docplex.cp*).", "apps": [], "results": {"msg": [{"data": "<h3>Step 1: Import the library</h3>\n<p></p>\n<p>Run the following code to the import the Decision Optimization CPLEX Modeling library.  The <em>DOcplex</em> library contains the two modeling packages, Mathematical Programming (<em>docplex.mp</em>) and Constraint Programming (<em>docplex.cp</em>).</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport sys\ntry:\n    import docplex.mp\nexcept:\n    raise Exception('Please install docplex. See https://pypi.org/project/docplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 2: Model the data\n#### Load data from a *pandas* DataFrame\n\nData for the Unit Commitment Problem is provided as a *pandas* DataFrame.\nFor a standalone notebook, we provide the raw data as Python collections,\nbut real data could be loaded\nfrom an Excel sheet, also using *pandas*.", "apps": [], "results": {"msg": [{"data": "<h3>Step 2: Model the data</h3>\n<h4>Load data from a <em>pandas</em> DataFrame</h4>\n<p></p>\n<p>Data for the Unit Commitment Problem is provided as a <em>pandas</em> DataFrame.</p>\n<p>For a standalone notebook, we provide the raw data as Python collections,</p>\n<p>but real data could be loaded</p>\n<p>from an Excel sheet, also using <em>pandas</em>.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\n# make matplotlib plots appear inside the notebook\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 11, 5 ############################ <-Use this to change the plot", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nUpdate the configuration of notebook so that display matches browser window width.", "apps": [], "results": {"msg": [{"data": "<p>Update the configuration of notebook so that display matches browser window width.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom IPython.core.display import HTML\nHTML(\"<style>.container { width:100%; }</style>\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Available energy technologies\n\nThe following *df_energy* DataFrame stores CO<sub>2</sub> cost information, indexed by energy type.", "apps": [], "results": {"msg": [{"data": "<h4>Available energy technologies</h4>\n<p></p>\n<p>The following <em>df_energy</em> DataFrame stores CO<sub>2</sub> cost information, indexed by energy type.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nenergies = [\"coal\", \"gas\", \"diesel\", \"wind\"]\ndf_energy = DataFrame({\"co2_cost\": [30, 5, 15, 0]}, index=energies)\n\n# Display the 'df_energy' Data Frame\ndf_energy", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe following *df_units* DataFrame stores common elements for units of a given technology.", "apps": [], "results": {"msg": [{"data": "<p>The following <em>df_units</em> DataFrame stores common elements for units of a given technology.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nall_units = [\"coal1\", \"coal2\", \n             \"gas1\", \"gas2\", \"gas3\", \"gas4\", \n             \"diesel1\", \"diesel2\", \"diesel3\", \"diesel4\"]\n             \nucp_raw_unit_data = {\n        \"energy\": [\"coal\", \"coal\", \"gas\", \"gas\", \"gas\", \"gas\", \"diesel\", \"diesel\", \"diesel\", \"diesel\"],\n        \"initial\" : [400, 350, 205, 52, 155, 150, 78, 76, 0, 0],\n        \"min_gen\": [100, 140, 78, 52, 54.25, 39, 17.4, 15.2, 4, 2.4],\n        \"max_gen\": [425, 365, 220, 210, 165, 158, 90, 87, 20, 12],\n        \"operating_max_gen\": [400, 350, 205, 197, 155, 150, 78, 76, 20, 12],\n        \"min_uptime\": [15, 15, 6, 5, 5, 4, 3, 3, 1, 1],\n        \"min_downtime\":[9, 8, 7, 4, 3, 2, 2, 2, 1, 1],\n        \"ramp_up\":   [212, 150, 101.2, 94.8, 58, 50, 40, 60, 20, 12],\n        \"ramp_down\": [183, 198, 95.6, 101.7, 77.5, 60, 24, 45, 20, 12],\n        \"start_cost\": [5000, 4550, 1320, 1291, 1280, 1105, 560, 554, 300, 250],\n        \"fixed_cost\": [208.61, 117.37, 174.12, 172.75, 95.353, 144.52, 54.417, 54.551, 79.638, 16.259],\n        \"variable_cost\": [22.536, 31.985, 70.5, 69, 32.146, 54.84, 40.222, 40.522, 116.33, 76.642],\n        }\n\ndf_units = DataFrame(ucp_raw_unit_data, index=all_units)\n\n# Display the 'df_units' Data Frame\ndf_units", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 3: Prepare the data", "apps": [], "results": {"msg": [{"data": "<h3>Step 3: Prepare the data</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe *pandas* *merge* operation is used to create a join between the *df_units* and *df_energy* DataFrames. Here, the join is performed based on the *'energy'* column of *df_units* and index column of *df_energy*.\n\nBy default, *merge* performs an *inner* join. That is, the resulting DataFrame is based on the **intersection** of keys from both input DataFrames.", "apps": [], "results": {"msg": [{"data": "<p>The <em>pandas</em> <em>merge</em> operation is used to create a join between the <em>df_units</em> and <em>df_energy</em> DataFrames. Here, the join is performed based on the <em>'energy'</em> column of <em>df_units</em> and index column of <em>df_energy</em>.</p>\n<p></p>\n<p>By default, <em>merge</em> performs an <em>inner</em> join. That is, the resulting DataFrame is based on the <strong>intersection</strong> of keys from both input DataFrames.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Add a derived co2-cost column by merging with df_energies\n# Use energy key from units and index from energy dataframe\ndf_up = pd.merge(df_units, df_energy, left_on=\"energy\", right_index=True)\ndf_up.index.names=['units']\n\n# Display first rows of new 'df_up' Data Frame\ndf_up.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe demand is stored as a *pandas* _Series_ indexed from 1 to the number of periods.", "apps": [], "results": {"msg": [{"data": "<p>The demand is stored as a <em>pandas</em> <em>Series</em> indexed from 1 to the number of periods.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nraw_demand = [1259.0, 1439.0, 1289.0, 1211.0, 1433.0, 1287.0, 1285.0, 1227.0, 1269.0, 1158.0, 1277.0, 1417.0, 1294.0, 1396.0, 1414.0, 1386.0,\n              1302.0, 1215.0, 1433.0, 1354.0, 1436.0, 1285.0, 1332.0, 1172.0, 1446.0, 1367.0, 1243.0, 1275.0, 1363.0, 1208.0, 1394.0, 1345.0, \n              1217.0, 1432.0, 1431.0, 1356.0, 1360.0, 1364.0, 1286.0, 1440.0, 1440.0, 1313.0, 1389.0, 1385.0, 1265.0, 1442.0, 1435.0, 1432.0, \n              1280.0, 1411.0, 1440.0, 1258.0, 1333.0, 1293.0, 1193.0, 1440.0, 1306.0, 1264.0, 1244.0, 1368.0, 1437.0, 1236.0, 1354.0, 1356.0, \n              1383.0, 1350.0, 1354.0, 1329.0, 1427.0, 1163.0, 1339.0, 1351.0, 1174.0, 1235.0, 1439.0, 1235.0, 1245.0, 1262.0, 1362.0, 1184.0, \n              1207.0, 1359.0, 1443.0, 1205.0, 1192.0, 1364.0, 1233.0, 1281.0, 1295.0, 1357.0, 1191.0, 1329.0, 1294.0, 1334.0, 1265.0, 1207.0, \n              1365.0, 1432.0, 1199.0, 1191.0, 1411.0, 1294.0, 1244.0, 1256.0, 1257.0, 1224.0, 1277.0, 1246.0, 1243.0, 1194.0, 1389.0, 1366.0, \n              1282.0, 1221.0, 1255.0, 1417.0, 1358.0, 1264.0, 1205.0, 1254.0, 1276.0, 1435.0, 1335.0, 1355.0, 1337.0, 1197.0, 1423.0, 1194.0, \n              1310.0, 1255.0, 1300.0, 1388.0, 1385.0, 1255.0, 1434.0, 1232.0, 1402.0, 1435.0, 1160.0, 1193.0, 1422.0, 1235.0, 1219.0, 1410.0, \n              1363.0, 1361.0, 1437.0, 1407.0, 1164.0, 1392.0, 1408.0, 1196.0, 1430.0, 1264.0, 1289.0, 1434.0, 1216.0, 1340.0, 1327.0, 1230.0, \n              1362.0, 1360.0, 1448.0, 1220.0, 1435.0, 1425.0, 1413.0, 1279.0, 1269.0, 1162.0, 1437.0, 1441.0, 1433.0, 1307.0, 1436.0, 1357.0, \n              1437.0, 1308.0, 1207.0, 1420.0, 1338.0, 1311.0, 1328.0, 1417.0, 1394.0, 1336.0, 1160.0, 1231.0, 1422.0, 1294.0, 1434.0, 1289.0]\nnb_periods = len(raw_demand)\nprint(\"nb periods = {}\".format(nb_periods))\n\ndemand = Series(raw_demand, index = range(1, nb_periods+1))\n\n# plot demand\ndemand.plot(title=\"Demand\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 4: Set up the prescriptive model", "apps": [], "results": {"msg": [{"data": "<h3>Step 4: Set up the prescriptive model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.environment import Environment\nenv = Environment()\nenv.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Create the DOcplex model\nThe model contains all the business constraints and defines the objective.", "apps": [], "results": {"msg": [{"data": "<h4>Create the DOcplex model</h4>\n<p>The model contains all the business constraints and defines the objective.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.model import Model\n\nucpm = Model(\"ucp\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Define the decision variables\n\nDecision variables are:\n\n- The variable *in_use[u,t]* is 1 if and only if unit _u_ is working at period _t_.\n- The variable *turn_on[u,t]* is 1 if and only if unit _u_ is in production at period _t_.\n- The variable *turn_off[u,t]* is 1 if unit _u_ is switched off at period _t_.\n- The variable *production[u,t]* is a continuous variables representing the production of energy for unit _u_ at period _t_.", "apps": [], "results": {"msg": [{"data": "<h4>Define the decision variables</h4>\n<p></p>\n<p>Decision variables are:</p>\n<p></p>\n<ul>\n<li>The variable <em>in_use[u,t]</em> is 1 if and only if unit <em>u</em> is working at period <em>t</em>.</li>\n</ul>\n<ul>\n<li>The variable <em>turn_on[u,t]</em> is 1 if and only if unit <em>u</em> is in production at period <em>t</em>.</li>\n</ul>\n<ul>\n<li>The variable <em>turn_off[u,t]</em> is 1 if unit <em>u</em> is switched off at period <em>t</em>.</li>\n</ul>\n<ul>\n<li>The variable <em>production[u,t]</em> is a continuous variables representing the production of energy for unit <em>u</em> at period <em>t</em>.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nunits = all_units\n# periods range from 1 to nb_periods included\nperiods = range(1, nb_periods+1)\n\n# in use[u,t] is true iff unit u is in production at period t\nin_use = ucpm.binary_var_matrix(keys1=units, keys2=periods, name=\"in_use\")\n\n# true if unit u is turned on at period t\nturn_on = ucpm.binary_var_matrix(keys1=units, keys2=periods, name=\"turn_on\")\n\n# true if unit u is switched off at period t\n# modeled as a continuous 0-1 variable, more on this later\nturn_off = ucpm.continuous_var_matrix(keys1=units, keys2=periods, lb=0, ub=1, name=\"turn_off\")\n\n# production of energy for unit u at period t\nproduction = ucpm.continuous_var_matrix(keys1=units, keys2=periods, name=\"p\")\n\n# at this stage we have defined the decision variables.\nucpm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Organize all decision variables in a DataFrame indexed by 'units' and 'periods'\ndf_decision_vars = DataFrame({'in_use': in_use, 'turn_on': turn_on, 'turn_off': turn_off, 'production': production})\n# Set index names\ndf_decision_vars.index.names=['units', 'periods']\n\n# Display first few rows of 'df_decision_vars' DataFrame\ndf_decision_vars.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the business constraints\n\n##### Linking in-use status to production\n\nWhenever the unit is in use, the production must be within the minimum and maximum generation.\n", "apps": [], "results": {"msg": [{"data": "<h4>Express the business constraints</h4>\n<p></p>\n<h5>Linking in-use status to production</h5>\n<p></p>\n<p>Whenever the unit is in use, the production must be within the minimum and maximum generation.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Create a join between 'df_decision_vars' and 'df_up' Data Frames based on common index id (ie: 'units')\n# In 'df_up', one keeps only relevant columns: 'min_gen' and 'max_gen'\ndf_join_decision_vars_up = df_decision_vars.join(df_up[['min_gen', 'max_gen']], how='inner')\n\n# Display first few rows of joined Data Frames\ndf_join_decision_vars_up.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport pandas as pb\nprint(pd.__version__)\n", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# When in use, the production level is constrained to be between min and max generation.\nfor item in df_join_decision_vars_up.itertuples(index=False):\n    ucpm += (item.production <= item.max_gen * item.in_use)\n    ucpm += (item.production >= item.min_gen * item.in_use)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Initial state\nThe solution must take into account the initial state. The initial state of use of the unit is determined by its initial production level.", "apps": [], "results": {"msg": [{"data": "<h5>Initial state</h5>\n<p>The solution must take into account the initial state. The initial state of use of the unit is determined by its initial production level.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Initial state\n# If initial production is nonzero, then period #1 is not a turn_on\n# else turn_on equals in_use\n# Dual logic is implemented for turn_off\nfor u in units:\n    if df_up.initial[u] > 0:\n        # if u is already running, not starting up\n        ucpm.add_constraint(turn_on[u, 1] == 0)\n        # turnoff iff not in use\n        ucpm.add_constraint(turn_off[u, 1] + in_use[u, 1] == 1)\n    else:\n        # turn on at 1 iff in use at 1\n        ucpm.add_constraint(turn_on[u, 1] == in_use[u, 1])\n        # already off, not switched off at t==1\n        ucpm.add_constraint(turn_off[u, 1] == 0)\n        ucpm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Ramp-up / ramp-down constraint\nVariations of the production level over time in a unit is constrained by a ramp-up / ramp-down process.\n\nWe use the *pandas* *groupby* operation to collect all decision variables for each unit in separate series. Then, we iterate over units to post constraints enforcing the ramp-up / ramp-down process by setting upper bounds on the variation of the production level for consecutive periods.", "apps": [], "results": {"msg": [{"data": "<h5>Ramp-up / ramp-down constraint</h5>\n<p>Variations of the production level over time in a unit is constrained by a ramp-up / ramp-down process.</p>\n<p></p>\n<p>We use the <em>pandas</em> <em>groupby</em> operation to collect all decision variables for each unit in separate series. Then, we iterate over units to post constraints enforcing the ramp-up / ramp-down process by setting upper bounds on the variation of the production level for consecutive periods.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Use groupby operation to process each unit\nfor unit, r in df_decision_vars.groupby(level='units'):\n    u_ramp_up = df_up.ramp_up[unit]\n    u_ramp_down = df_up.ramp_down[unit]\n    u_initial = df_up.initial[unit]\n    # Initial ramp up/down\n    # Note that r.production is a Series that can be indexed as an array (ie: first item index = 0)\n    ucpm.add_constraint(r.production[0] - u_initial <= u_ramp_up)\n    ucpm.add_constraint(u_initial - r.production[0] <= u_ramp_down)\n    for (p_curr, p_next) in zip(r.production, r.production[1:]):\n        ucpm.add_constraint(p_next - p_curr <= u_ramp_up)\n        ucpm.add_constraint(p_curr - p_next <= u_ramp_down)\n\n        ucpm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Turn on / turn off\nThe following constraints determine when a unit is turned on or off.\n\nWe use the same *pandas* *groupby* operation as in the previous constraint to iterate over the sequence of decision variables for each unit.", "apps": [], "results": {"msg": [{"data": "<h5>Turn on / turn off</h5>\n<p>The following constraints determine when a unit is turned on or off.</p>\n<p></p>\n<p>We use the same <em>pandas</em> <em>groupby</em> operation as in the previous constraint to iterate over the sequence of decision variables for each unit.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Turn_on, turn_off\n# Use groupby operation to process each unit\nfor unit, r in df_decision_vars.groupby(level='units'):\n    for (in_use_curr, in_use_next, turn_on_next, turn_off_next) in zip(r.in_use, r.in_use[1:], r.turn_on[1:], r.turn_off[1:]):\n        # if unit is off at time t and on at time t+1, then it was turned on at time t+1\n        ucpm.add_constraint(in_use_next - in_use_curr <= turn_on_next)\n\n        # if unit is on at time t and time t+1, then it was not turned on at time t+1\n        # mdl.add_constraint(in_use_next + in_use_curr + turn_on_next <= 2)\n\n        # if unit is on at time t and off at time t+1, then it was turned off at time t+1\n        ucpm.add_constraint(in_use_curr - in_use_next + turn_on_next == turn_off_next)\nucpm.print_information()        ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Minimum uptime and downtime\nWhen a unit is turned on, it cannot be turned off before a *minimum uptime*. Conversely, when a unit is turned off, it cannot be turned on again before a *minimum downtime*.\n\nAgain, let's use the same *pandas* *groupby* operation to implement this constraint for each unit.", "apps": [], "results": {"msg": [{"data": "<h5>Minimum uptime and downtime</h5>\n<p>When a unit is turned on, it cannot be turned off before a <em>minimum uptime</em>. Conversely, when a unit is turned off, it cannot be turned on again before a <em>minimum downtime</em>.</p>\n<p></p>\n<p>Again, let's use the same <em>pandas</em> <em>groupby</em> operation to implement this constraint for each unit.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Minimum uptime, downtime\nfor unit, r in df_decision_vars.groupby(level='units'):\n    min_uptime   = df_up.min_uptime[unit]\n    min_downtime = df_up.min_downtime[unit]\n    # Note that r.turn_on and r.in_use are Series that can be indexed as arrays (ie: first item index = 0)\n    for t in range(min_uptime, nb_periods):\n        ctname = \"min_up_{0!s}_{1}\".format(*r.index[t])\n        ucpm.add_constraint(ucpm.sum(r.turn_on[(t - min_uptime) + 1:t + 1]) <= r.in_use[t], ctname)\n\n    for t in range(min_downtime, nb_periods):\n        ctname = \"min_down_{0!s}_{1}\".format(*r.index[t])\n        ucpm.add_constraint(ucpm.sum(r.turn_off[(t - min_downtime) + 1:t + 1]) <= 1 - r.in_use[t], ctname)\n", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Demand constraint\nTotal production level must be equal or higher than demand on any period.\n\nThis time, the *pandas* operation *groupby* is performed on *\"periods\"* since we have to iterate over the list of all units for each period.", "apps": [], "results": {"msg": [{"data": "<h5>Demand constraint</h5>\n<p>Total production level must be equal or higher than demand on any period.</p>\n<p></p>\n<p>This time, the <em>pandas</em> operation <em>groupby</em> is performed on <em>\"periods\"</em> since we have to iterate over the list of all units for each period.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Enforcing demand\n# we use a >= here to be more robust, \n# objective will ensure  we produce efficiently\nfor period, r in df_decision_vars.groupby(level='periods'):\n    total_demand = demand[period]\n    ctname = \"ct_meet_demand_%d\" % period\n    ucpm.add_constraint(ucpm.sum(r.production) >= total_demand, ctname) ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the objective\n\nOperating the different units incur different costs: fixed cost, variable cost, startup cost, co2 cost.\n\nIn a first step, we define the objective as a non-weighted sum of all these costs.\n\nThe following *pandas* *join* operation groups all the data to calculate the objective in a single DataFrame.", "apps": [], "results": {"msg": [{"data": "<h4>Express the objective</h4>\n<p></p>\n<p>Operating the different units incur different costs: fixed cost, variable cost, startup cost, co2 cost.</p>\n<p></p>\n<p>In a first step, we define the objective as a non-weighted sum of all these costs.</p>\n<p></p>\n<p>The following <em>pandas</em> <em>join</em> operation groups all the data to calculate the objective in a single DataFrame.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Create a join between 'df_decision_vars' and 'df_up' Data Frames based on common index ids (ie: 'units')\n# In 'df_up', one keeps only relevant columns: 'fixed_cost', 'variable_cost', 'start_cost' and 'co2_cost'\ndf_join_obj = df_decision_vars.join(\n    df_up[['fixed_cost', 'variable_cost', 'start_cost', 'co2_cost']], how='inner')\n\n# Display first few rows of joined Data Frame\ndf_join_obj.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# objective\ntotal_fixed_cost = ucpm.sum(df_join_obj.in_use * df_join_obj.fixed_cost)\ntotal_variable_cost = ucpm.sum(df_join_obj.production * df_join_obj.variable_cost)\ntotal_startup_cost = ucpm.sum(df_join_obj.turn_on * df_join_obj.start_cost)\ntotal_co2_cost = ucpm.sum(df_join_obj.production * df_join_obj.co2_cost)\ntotal_economic_cost = total_fixed_cost + total_variable_cost + total_startup_cost\n\ntotal_nb_used = ucpm.sum(df_decision_vars.in_use)\ntotal_nb_starts = ucpm.sum(df_decision_vars.turn_on)\n\n# store expression kpis to retrieve them later.\nucpm.add_kpi(total_fixed_cost   , \"Total Fixed Cost\")\nucpm.add_kpi(total_variable_cost, \"Total Variable Cost\")\nucpm.add_kpi(total_startup_cost , \"Total Startup Cost\")\nucpm.add_kpi(total_economic_cost, \"Total Economic Cost\")\nucpm.add_kpi(total_co2_cost     , \"Total CO2 Cost\")\nucpm.add_kpi(total_nb_used, \"Total #used\")\nucpm.add_kpi(total_nb_starts, \"Total #starts\")\n\n# minimize sum of all costs\nucpm.minimize(total_fixed_cost + total_variable_cost + total_startup_cost + total_co2_cost)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Solve with Decision Optimization\n\nIf you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.", "apps": [], "results": {"msg": [{"data": "<h4>Solve with Decision Optimization</h4>\n<p></p>\n<p>If you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nucpm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nassert ucpm.solve(), \"!!! Solve of the model fails\"", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nucpm.report()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 5: Investigate the solution and then run an example analysis\n\nNow let's store the results in a new *pandas* DataFrame.\n\nFor convenience, the different figures are organized into pivot tables with *periods* as row index and *units* as columns. The *pandas* *unstack* operation does this for us.", "apps": [], "results": {"msg": [{"data": "<h3>Step 5: Investigate the solution and then run an example analysis</h3>\n<p></p>\n<p>Now let's store the results in a new <em>pandas</em> DataFrame.</p>\n<p></p>\n<p>For convenience, the different figures are organized into pivot tables with <em>periods</em> as row index and <em>units</em> as columns. The <em>pandas</em> <em>unstack</em> operation does this for us.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_prods = df_decision_vars.production.apply(lambda v: v.solution_value).unstack(level='units')\ndf_used = df_decision_vars.in_use.apply(lambda v: v.solution_value).unstack(level='units')\ndf_started = df_decision_vars.turn_on.apply(lambda v: v.solution_value).unstack(level='units')\n\n# Display the first few rows of the pivoted 'production' data\ndf_prods.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nFrom these raw DataFrame results, we can compute _derived_ results.\nFor example, for a given unit and period, the _reserve_ r(u,t) is defined as\nthe unit's maximum generation minus the current production.", "apps": [], "results": {"msg": [{"data": "<p>From these raw DataFrame results, we can compute <em>derived</em> results.</p>\n<p>For example, for a given unit and period, the <em>reserve</em> r(u,t) is defined as</p>\n<p>the unit's maximum generation minus the current production.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_spins = DataFrame(df_up.max_gen.to_dict(), index=periods) - df_prods\n\n# Display the first few rows of the 'df_spins' Data Frame, representing the reserve for each unit, over time\ndf_spins.head()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nLet's plot the evolution of the reserves for the *\"coal2\"* unit:", "apps": [], "results": {"msg": [{"data": "<p>Let's plot the evolution of the reserves for the <em>\"coal2\"</em> unit:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_spins.coal2.plot(style='o-', ylim=[0,200])", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nNow we want to sum all unit reserves to compute the _global_ spinning reserve.\nWe need to sum all columns of the DataFrame to get an aggregated time series. We use the *pandas* **sum** method\nwith axis=1 (for rows).", "apps": [], "results": {"msg": [{"data": "<p>Now we want to sum all unit reserves to compute the <em>global</em> spinning reserve.</p>\n<p>We need to sum all columns of the DataFrame to get an aggregated time series. We use the <em>pandas</em> <strong>sum</strong> method</p>\n<p>with axis=1 (for rows).</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nglobal_spin = df_spins.sum(axis=1)\nglobal_spin.plot(title=\"Global spinning reserve\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Number of plants online by period\n\nThe total number of plants online at each period t is the sum of in_use variables for all units at this period.\nAgain, we use the *pandas* sum with axis=1 (for rows) to sum over all units.", "apps": [], "results": {"msg": [{"data": "<h4>Number of plants online by period</h4>\n<p></p>\n<p>The total number of plants online at each period t is the sum of in_use variables for all units at this period.</p>\n<p>Again, we use the <em>pandas</em> sum with axis=1 (for rows) to sum over all units.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_used.sum(axis=1).plot(title=\"Number of plants online\", kind='line', style=\"r-\", ylim=[0, len(units)])", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Costs by period", "apps": [], "results": {"msg": [{"data": "<h4>Costs by period</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# extract unit cost data\nall_costs = [\"fixed_cost\", \"variable_cost\", \"start_cost\", \"co2_cost\"]\ndf_costs = df_up[all_costs]\n\nrunning_cost = df_used * df_costs.fixed_cost\nstartup_cost = df_started * df_costs.start_cost\nvariable_cost = df_prods * df_costs.variable_cost\nco2_cost = df_prods * df_costs.co2_cost\ntotal_cost = running_cost + startup_cost + variable_cost + co2_cost\n\nrunning_cost.sum(axis=1).plot(style='g')\nstartup_cost.sum(axis=1).plot(style='r')\nvariable_cost.sum(axis=1).plot(style='b',logy=True)\nco2_cost.sum(axis=1).plot(style='k')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Cost breakdown by unit and by energy", "apps": [], "results": {"msg": [{"data": "<h4>Cost breakdown by unit and by energy</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Calculate sum by column (by default, axis = 0) to get total cost for each unit\ncost_by_unit = total_cost.sum()\n\n# Create a dictionary storing energy type for each unit, from the corresponding pandas Series\nunit_energies = df_up.energy.to_dict()\n\n# Group cost by unit type and plot total cost by energy type in a pie chart\ngb = cost_by_unit.groupby(unit_energies)\n# gb.sum().plot(kind='pie')\ngb.sum().plot.pie(figsize=(6, 6),autopct='%.2f',fontsize=15)\n\nplt.title('total cost by energy type', bbox={'facecolor':'0.8', 'pad':5})", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Arbitration between CO<sub>2</sub> cost and economic cost\n\nEconomic cost and CO<sub>2</sub> cost usually push in opposite directions.\nIn the above discussion, we have minimized the raw sum of economic cost and CO<sub>2</sub> cost, without weights.\nBut how good could we be on CO<sub>2</sub>, regardless of economic constraints? \nTo know this, let's solve again with CO<sub>2</sub> cost as the only objective.\n", "apps": [], "results": {"msg": [{"data": "<h3>Arbitration between CO<sub>2</sub> cost and economic cost</h3>\n<p></p>\n<p>Economic cost and CO<sub>2</sub> cost usually push in opposite directions.</p>\n<p>In the above discussion, we have minimized the raw sum of economic cost and CO<sub>2</sub> cost, without weights.</p>\n<p>But how good could we be on CO<sub>2</sub>, regardless of economic constraints? </p>\n<p>To know this, let's solve again with CO<sub>2</sub> cost as the only objective.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# first retrieve the co2 and economic kpis\nco2_kpi = ucpm.kpi_by_name(\"co2\") # does a name matching\neco_kpi = ucpm.kpi_by_name(\"eco\")\nprev_co2_cost = co2_kpi.compute()\nprev_eco_cost = eco_kpi.compute()\nprint(\"* current CO2 cost is: {}\".format(prev_co2_cost))\nprint(\"* current $$$ cost is: {}\".format(prev_eco_cost))\n# now set the objective\nold_objective = ucpm.objective_expr # save it\nucpm.minimize(co2_kpi.as_expression())", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nassert ucpm.solve(), \"Solve failed\"", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmin_co2_cost = ucpm.objective_value\nmin_co2_eco_cost = eco_kpi.compute()\nprint(\"* absolute minimum for CO2 cost is {}\".format(min_co2_cost))\nprint(\"* at this point $$$ cost is {}\".format(min_co2_eco_cost))", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nAs expected, we get a significantly lower CO<sub>2</sub> cost when minimized alone, at the price of a higher economic cost.\n\nWe could do a similar analysis for economic cost to estimate the absolute minimum of\nthe economic cost, regardless of CO<sub>2</sub> cost.", "apps": [], "results": {"msg": [{"data": "<p>As expected, we get a significantly lower CO<sub>2</sub> cost when minimized alone, at the price of a higher economic cost.</p>\n<p></p>\n<p>We could do a similar analysis for economic cost to estimate the absolute minimum of</p>\n<p>the economic cost, regardless of CO<sub>2</sub> cost.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# minimize only economic cost\nucpm.minimize(eco_kpi.as_expression())", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nassert ucpm.solve(), \"Solve failed\"", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmin_eco_cost = ucpm.objective_value\nmin_eco_co2_cost = co2_kpi.compute()\nprint(\"* absolute minimum for $$$ cost is {}\".format(min_eco_cost))\nprint(\"* at this point CO2 cost is {}\".format(min_eco_co2_cost))", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nAgain, the absolute minimum for economic cost is lower than the figure we obtained in the original model where we minimized the _sum_ of economic and CO<sub>2</sub> costs, but here we significantly increase the CO<sub>2</sub>.\n\nBut what happens in between these two extreme points?\n\nTo investigate, we will divide the interval of CO<sub>2</sub> cost values in smaller intervals, add an upper limit on CO<sub>2</sub>,\nand minimize economic cost with this constraint. This will give us a Pareto optimal point with at most this CO<sub>2</sub> value.\n\nTo avoid adding many constraints, we add only one constraint with an extra variable, and we change only the upper bound\nof this CO<sub>2</sub> limit variable between successive solves.\n\nThen we iterate (with a fixed number of iterations) and collect the cost values. ", "apps": [], "results": {"msg": [{"data": "<p>Again, the absolute minimum for economic cost is lower than the figure we obtained in the original model where we minimized the <em>sum</em> of economic and CO<sub>2</sub> costs, but here we significantly increase the CO<sub>2</sub>.</p>\n<p></p>\n<p>But what happens in between these two extreme points?</p>\n<p></p>\n<p>To investigate, we will divide the interval of CO<sub>2</sub> cost values in smaller intervals, add an upper limit on CO<sub>2</sub>,</p>\n<p>and minimize economic cost with this constraint. This will give us a Pareto optimal point with at most this CO<sub>2</sub> value.</p>\n<p></p>\n<p>To avoid adding many constraints, we add only one constraint with an extra variable, and we change only the upper bound</p>\n<p>of this CO<sub>2</sub> limit variable between successive solves.</p>\n<p></p>\n<p>Then we iterate (with a fixed number of iterations) and collect the cost values. </p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# add extra variable\nco2_limit = ucpm.continuous_var(lb=0)\n# add a named constraint which limits total co2 cost to this variable:\nmax_co2_ctname = \"ct_max_co2\"\nco2_ct = ucpm.add_constraint(co2_kpi.as_expression() <= co2_limit, max_co2_ctname)     ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nco2min = min_co2_cost\nco2max = min_eco_co2_cost\ndef explore_ucp(nb_iters, eps=1e-5):\n\n    step = (co2max-co2min)/float(nb_iters)\n    co2_ubs = [co2min + k * step for k in range(nb_iters+1)]\n\n    # ensure we minimize eco\n    ucpm.minimize(eco_kpi.as_expression())\n    all_co2s = []\n    all_ecos = []\n    for k in range(nb_iters+1):\n        co2_ub = co2min + k * step\n        print(\" iteration #{0} co2_ub={1}\".format(k, co2_ub))\n        co2_limit.ub = co2_ub + eps\n        assert ucpm.solve() is not None, \"Solve failed\"\n        cur_co2 = co2_kpi.compute()\n        cur_eco = eco_kpi.compute()\n        all_co2s.append(cur_co2)\n        all_ecos.append(cur_eco)\n    return all_co2s, all_ecos", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n#explore the co2/eco frontier in 50 points\nco2s, ecos = explore_ucp(nb_iters=50)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# normalize all values by dividing by their maximum\neco_max = min_co2_eco_cost\nnxs = [c / co2max for c in co2s]\nnys = [e / eco_max for e in ecos]\n# plot a scatter chart of x=co2, y=costs\nplt.scatter(nxs, nys)\n# plot as one point\nplt.plot(prev_co2_cost/co2max, prev_eco_cost/eco_max, \"rH\", markersize=16)\nplt.xlabel(\"co2 cost\")\nplt.ylabel(\"economic cost\")\nplt.show()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThis figure demonstrates that the result obtained in the initial model clearly favored\neconomic cost over CO<sub>2</sub> cost: CO<sub>2</sub> cost is well above 95% of its maximum value.", "apps": [], "results": {"msg": [{"data": "<p>This figure demonstrates that the result obtained in the initial model clearly favored</p>\n<p>economic cost over CO<sub>2</sub> cost: CO<sub>2</sub> cost is well above 95% of its maximum value.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Summary\n\nYou learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with IBM Decision Optimization on Cloud.", "apps": [], "results": {"msg": [{"data": "<h2>Summary</h2>\n<p></p>\n<p>You learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with IBM Decision Optimization on Cloud.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### References\n* [CPLEX Modeling for Python documentation](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)\n* [Decision Optimization on Cloud](https://developer.ibm.com/docloud/)\n* Need help with DOcplex or to report a bug? Please go [here](https://developer.ibm.com/answers/smartspace/docloud).\n* Contact us at dofeedback@wwpdl.vnet.ibm.com.", "apps": [], "results": {"msg": [{"data": "<h4>References</h4>\n<ul>\n<li><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">CPLEX Modeling for Python documentation</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.ibm.com/docloud/\">Decision Optimization on Cloud</a></li>\n</ul>\n<ul>\n<li>Need help with DOcplex or to report a bug? Please go <a href=\"https://developer.ibm.com/answers/smartspace/docloud\">here</a>.</li>\n</ul>\n<ul>\n<li>Contact us at dofeedback@wwpdl.vnet.ibm.com.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nCopyright \u00a9 2017-2018 IBM. IPLA licensed Sample Materials.", "apps": [], "results": {"msg": [{"data": "<p>Copyright \u00a9 2017-2018 IBM. IPLA licensed Sample Materials.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}]}