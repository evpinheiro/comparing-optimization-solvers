{"info": {}, "config": {"looknfeel": "default", "personalizedMode": "false"}, "name": "C:\\Users\\AURELIEFolacci\\python\\workspace\\docplex\\docplex\\src\\samples\\examples\\delivery\\jupyter\\incremental_modeling", "paragraphs": [{"settings": {"forms": {}, "params": {}}, "text": "%md\n# Incremental modeling with decision optimization\n\nThis tutorial includes everything you need to set up decision optimization engines, build a mathematical programming model, then incrementally modify it.\nYou will learn how to:\n- change coefficients in an expression\n- add terms in an expression\n- modify constraints and variables bounds\n- remove/add constraints\n- play with relaxations\n\n\nWhen you finish this tutorial, you'll have a foundational knowledge of _Prescriptive Analytics_.\n\n>This notebook is part of the **[Prescriptive Analytics for Python](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)**\n\n>It requires an [installation of CPLEX Optimizers](http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html)\n\nDiscover us [here](https://developer.ibm.com/docloud)\n\n\nTable of contents:\n\n-  Describe the business problem\n*  How decision optimization (prescriptive analytics) can help\n*  Use decision optimization\n    *  Step 1: Import the library\n    *  Step 2: Set up the prescriptive model\n    *  Step 3: Modify the model\n*  Summary\n****", "apps": [], "results": {"msg": [{"data": "<h1>Incremental modeling with decision optimization</h1>\n<p></p>\n<p>This tutorial includes everything you need to set up decision optimization engines, build a mathematical programming model, then incrementally modify it.</p>\n<p>You will learn how to:</p>\n<ul>\n<li>change coefficients in an expression</li>\n</ul>\n<ul>\n<li>add terms in an expression</li>\n</ul>\n<ul>\n<li>modify constraints and variables bounds</li>\n</ul>\n<ul>\n<li>remove/add constraints</li>\n</ul>\n<ul>\n<li>play with relaxations</li>\n</ul>\n<p></p>\n<p></p>\n<p>When you finish this tutorial, you'll have a foundational knowledge of <em>Prescriptive Analytics</em>.</p>\n<p></p>\n<blockquote>\n  <p>This notebook is part of the <strong><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Prescriptive Analytics for Python</a></strong></p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p>It requires an <a href=\"http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html\">installation of CPLEX Optimizers</a></p>\n</blockquote>\n<p></p>\n<p>Discover us <a href=\"https://developer.ibm.com/docloud\">here</a></p>\n<p></p>\n<p></p>\n<p>Table of contents:</p>\n<p></p>\n<ul>\n<li>Describe the business problem</li>\n</ul>\n<ul>\n<li>How decision optimization (prescriptive analytics) can help</li>\n</ul>\n<ul>\n<li>Use decision optimization</li>\n</ul>\n<pre><code>*  Step 1: Import the library\n</code></pre>\n<pre><code>*  Step 2: Set up the prescriptive model\n</code></pre>\n<pre><code>*  Step 3: Modify the model\n</code></pre>\n<ul>\n<li>Summary</li>\n</ul>\n<hr />\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Describe the business problem:  Telephone production\n\nA possible descriptive model of the telephone production problem is as follows:\n* Decision variables:\n   * Number of desk phones produced (DeskProduction)\n   * Number of cellular phones produced (CellProduction)\nObjective: Maximize profit\n* Constraints:\n   * The DeskProduction should be greater than or equal to 100.\n   * The CellProduction should be greater than or equal to 100.\n   * The assembly time for DeskProduction plus the assembly time for CellProduction should not exceed 400 hours.\n   * The painting time for DeskProduction plus the painting time for CellProduction should not exceed 490 hours.\n\nThis is a type of discrete optimization problem that can be solved by using either **Integer Programming** (IP) or **Constraint Programming** (CP). \n\n>  **Integer Programming** is the class of problems defined as the optimization of a linear function, subject to linear constraints over integer variables. \n\n>  **Constraint Programming** problems generally have discrete decision variables, but the constraints can be logical, and the arithmetic expressions are not restricted to being linear. \n\nFor the purposes of this tutorial, we will illustrate a solution with mathematical programming (MP).  \n", "apps": [], "results": {"msg": [{"data": "<h2>Describe the business problem:  Telephone production</h2>\n<p></p>\n<p>A possible descriptive model of the telephone production problem is as follows:</p>\n<ul>\n<li>Decision variables:</li>\n</ul>\n<ul>\n<li>Number of desk phones produced (DeskProduction)</li>\n</ul>\n<ul>\n<li>Number of cellular phones produced (CellProduction)</li>\n</ul>\n<p>Objective: Maximize profit</p>\n<ul>\n<li>Constraints:</li>\n</ul>\n<ul>\n<li>The DeskProduction should be greater than or equal to 100.</li>\n</ul>\n<ul>\n<li>The CellProduction should be greater than or equal to 100.</li>\n</ul>\n<ul>\n<li>The assembly time for DeskProduction plus the assembly time for CellProduction should not exceed 400 hours.</li>\n</ul>\n<ul>\n<li>The painting time for DeskProduction plus the painting time for CellProduction should not exceed 490 hours.</li>\n</ul>\n<p></p>\n<p>This is a type of discrete optimization problem that can be solved by using either <strong>Integer Programming</strong> (IP) or <strong>Constraint Programming</strong> (CP). </p>\n<p></p>\n<blockquote>\n  <p><strong>Integer Programming</strong> is the class of problems defined as the optimization of a linear function, subject to linear constraints over integer variables. </p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p><strong>Constraint Programming</strong> problems generally have discrete decision variables, but the constraints can be logical, and the arithmetic expressions are not restricted to being linear. </p>\n</blockquote>\n<p></p>\n<p>For the purposes of this tutorial, we will illustrate a solution with mathematical programming (MP).  </p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## How  decision optimization can help\n\n* Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  \n\n* Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  \n\n* Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  \n<br/>\n\n<u>With prescriptive analytics, you can:</u> \n\n* Automate the complex decisions and trade-offs to better manage your limited resources.\n* Take advantage of a future opportunity or mitigate a future risk.\n* Proactively update recommendations based on changing events.\n* Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.\n\n", "apps": [], "results": {"msg": [{"data": "<h2>How  decision optimization can help</h2>\n<p></p>\n<ul>\n<li>Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  </li>\n</ul>\n<p><br/></p>\n<p></p>\n<p><u>With prescriptive analytics, you can:</u> </p>\n<p></p>\n<ul>\n<li>Automate the complex decisions and trade-offs to better manage your limited resources.</li>\n</ul>\n<ul>\n<li>Take advantage of a future opportunity or mitigate a future risk.</li>\n</ul>\n<ul>\n<li>Proactively update recommendations based on changing events.</li>\n</ul>\n<ul>\n<li>Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.</li>\n</ul>\n<p></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Use decision optimization", "apps": [], "results": {"msg": [{"data": "<h2>Use decision optimization</h2>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 1: Import the library\n\nRun the following code to import Decision Optimization CPLEX Modeling library.  The *DOcplex* library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.", "apps": [], "results": {"msg": [{"data": "<h3>Step 1: Import the library</h3>\n<p></p>\n<p>Run the following code to import Decision Optimization CPLEX Modeling library.  The <em>DOcplex</em> library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport sys\ntry:\n    import docplex.mp\nexcept:\n    raise Exception('Please install docplex. See https://pypi.org/project/docplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nA restart of the kernel might be needed.", "apps": [], "results": {"msg": [{"data": "<p>A restart of the kernel might be needed.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 2: Set up the prescriptive model", "apps": [], "results": {"msg": [{"data": "<h3>Step 2: Set up the prescriptive model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Writing a mathematical model\nConvert the descriptive model into a mathematical model:\n* Use the two decision variables DeskProduction and CellProduction\n* Use the data given in the problem description (remember to convert minutes to hours where appropriate)\n* Write the objective as a mathematical expression\n* Write the constraints as mathematical expressions (use \u201c=\u201d, \u201c<=\u201d, or \u201c>=\u201d, and name the constraints to describe their purpose)\n* Define the domain for the decision variables\n\n\n#### Telephone production: a mathematical model\nTo express the last two constraints, we model assembly time and painting time as linear combinations of the two productions, resulting in the following mathematical model:\n\n<code>maximize:  12 desk_production+20 cell_production\n\nsubject to:  \n   desk_production>=100  \n   cell_production>=100  \n   0.2 desk_production+0.4 cell_production<=400  \n   0.5 desk_production+0.4 cell_production<=490\n</code>", "apps": [], "results": {"msg": [{"data": "<h4>Writing a mathematical model</h4>\n<p>Convert the descriptive model into a mathematical model:</p>\n<ul>\n<li>Use the two decision variables DeskProduction and CellProduction</li>\n</ul>\n<ul>\n<li>Use the data given in the problem description (remember to convert minutes to hours where appropriate)</li>\n</ul>\n<ul>\n<li>Write the objective as a mathematical expression</li>\n</ul>\n<ul>\n<li>Write the constraints as mathematical expressions (use \u201c=\u201d, \u201c&lt;=\u201d, or \u201c&gt;=\u201d, and name the constraints to describe their purpose)</li>\n</ul>\n<ul>\n<li>Define the domain for the decision variables</li>\n</ul>\n<p></p>\n<p></p>\n<h4>Telephone production: a mathematical model</h4>\n<p>To express the last two constraints, we model assembly time and painting time as linear combinations of the two productions, resulting in the following mathematical model:</p>\n<p></p>\n<p><code>maximize:  12 desk<em>production+20 cell</em>production</p>\n<p></p>\n<p>subject to:  </p>\n<p>desk_production>=100  </p>\n<p>cell_production>=100  </p>\n<p>0.2 desk<em>production+0.4 cell</em>production&lt;=400  </p>\n<p>0.5 desk<em>production+0.4 cell</em>production&lt;=490</p>\n<p></code></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# first import the Model class from docplex.mp\nfrom docplex.mp.model import Model\n\n# create one model instance, with a name\nm = Model(name='telephone_production')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe continuous variable desk represents the production of desk telephones.\nThe continuous variable cell represents the production of cell phones.", "apps": [], "results": {"msg": [{"data": "<p>The continuous variable desk represents the production of desk telephones.</p>\n<p>The continuous variable cell represents the production of cell phones.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# by default, all variables in Docplex have a lower bound of 0 and infinite upper bound\ndesk = m.integer_var(name='desk')\ncell = m.integer_var(name='cell')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.maximize(12 * desk + 20 * cell)\n\n# write constraints\n# constraint #1: desk production is greater than 100\nm.add_constraint(desk >= 100, \"desk\")\n\n# constraint #2: cell production is greater than 100\nm.add_constraint(cell >= 100, \"cell\")\n\n# constraint #3: assembly time limit\nct_assembly = m.add_constraint( 0.2 * desk + 0.4 * cell <= 400, \"assembly_limit\")\n\n# constraint #4: paiting time limit\nct_painting = m.add_constraint( 0.5 * desk + 0.4 * cell <= 490, \"painting_limit\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Solve with Decision Optimization \n\nIf you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.\n\nYou will get the best solution found after ***n*** seconds, thanks to a time limit parameter.", "apps": [], "results": {"msg": [{"data": "<h4>Solve with Decision Optimization</h4>\n<p></p>\n<p>If you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.</p>\n<p></p>\n<p>You will get the best solution found after <strong><em>n</em></strong> seconds, thanks to a time limit parameter.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.print_information()\nmsol = m.solve()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nassert msol is not None, \"model can't solve\"\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 3: Modify the model", "apps": [], "results": {"msg": [{"data": "<h3>Step 3: Modify the model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Modify constraints and variables bounds", "apps": [], "results": {"msg": [{"data": "<h4>Modify constraints and variables bounds</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe model object provides getters to retrieve variables and constraints by name:\n* get_var_by_name\n* get_constraint_by_name\nThe variable and constraint objects both provide properties to access the right hand side (rhs) and left hand side (lhs).\nWhen you modify a rhs or lhs of a variable, you of course need to give a number.\nWhen you modify a rhs or lhs of a constraint, you can give a number or an expression based on variables.\n\nLet's say we want to build 2000 cells and 1000 desks maximum.\n\nAnd let's say we want to increase the production of both of them from 100 to 350", "apps": [], "results": {"msg": [{"data": "<p>The model object provides getters to retrieve variables and constraints by name:</p>\n<ul>\n<li>get<em>var</em>by_name</li>\n</ul>\n<ul>\n<li>get<em>constraint</em>by_name</li>\n</ul>\n<p>The variable and constraint objects both provide properties to access the right hand side (rhs) and left hand side (lhs).</p>\n<p>When you modify a rhs or lhs of a variable, you of course need to give a number.</p>\n<p>When you modify a rhs or lhs of a constraint, you can give a number or an expression based on variables.</p>\n<p></p>\n<p>Let's say we want to build 2000 cells and 1000 desks maximum.</p>\n<p></p>\n<p>And let's say we want to increase the production of both of them from 100 to 350</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Access by name\nm.get_var_by_name(\"desk\").ub = 2000\n# acess via the object\ncell.ub = 1000\n\n\nm.get_constraint_by_name(\"desk\").rhs = 350\nm.get_constraint_by_name(\"cell\").rhs = 350", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmsol = m.solve()\nassert msol is not None, \"model can't solve\"\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe production plan has been updated accordingly to our small changes.", "apps": [], "results": {"msg": [{"data": "<p>The production plan has been updated accordingly to our small changes.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Modify expressions", "apps": [], "results": {"msg": [{"data": "<h4>Modify expressions</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWe now want to introduce a new type of product: the \"hybrid\" telephone.", "apps": [], "results": {"msg": [{"data": "<p>We now want to introduce a new type of product: the \"hybrid\" telephone.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nhybrid = m.integer_var(name='hybrid')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWe need to:\n- introduce it in the objective\n- introduce it in the existing painting and assembly time constraints \n- add a new constraint for its production to produce at least 350 of them.", "apps": [], "results": {"msg": [{"data": "<p>We need to:</p>\n<ul>\n<li>introduce it in the objective</li>\n</ul>\n<ul>\n<li>introduce it in the existing painting and assembly time constraints </li>\n</ul>\n<ul>\n<li>add a new constraint for its production to produce at least 350 of them.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.add_constraint(hybrid >= 350);", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe objective will move from\n<code>\nmaximize:  12 desk_production+20 cell_production\n</code>\nto\n<code>\nmaximize:  12 desk_production+20 cell_production + 10 hybrid_prodction\n</code>", "apps": [], "results": {"msg": [{"data": "<p>The objective will move from</p>\n<p><code></p>\n<p>maximize:  12 desk<em>production+20 cell</em>production</p>\n<p></code></p>\n<p>to</p>\n<p><code></p>\n<p>maximize:  12 desk<em>production+20 cell</em>production + 10 hybrid_prodction</p>\n<p></code></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.get_objective_expr().add_term(hybrid, 10);", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe time constraints will be updated from \n<code>\n0.2 desk_production+0.4 cell_production<=400\n0.5 desk_production+0.4 cell_production<=490\n</code>\nto\n<code>\n0.2 desk_production+0.4 cell_production + 0.2 hybrid_production<=400\n0.5 desk_production+0.4 cell_production + 0.2 hybrid_production<=490\n</code>", "apps": [], "results": {"msg": [{"data": "<p>The time constraints will be updated from </p>\n<p><code></p>\n<p>0.2 desk<em>production+0.4 cell</em>production&lt;=400</p>\n<p>0.5 desk<em>production+0.4 cell</em>production&lt;=490</p>\n<p></code></p>\n<p>to</p>\n<p><code></p>\n<p>0.2 desk<em>production+0.4 cell</em>production + 0.2 hybrid_production&lt;=400</p>\n<p>0.5 desk<em>production+0.4 cell</em>production + 0.2 hybrid_production&lt;=490</p>\n<p></code></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWhen you add a constraint to a model, its object is returned to you by the method add_constraint.\nIf you don't have it, you can access it via its name", "apps": [], "results": {"msg": [{"data": "<p>When you add a constraint to a model, its object is returned to you by the method add_constraint.</p>\n<p>If you don't have it, you can access it via its name</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.get_constraint_by_name(\"assembly_limit\").lhs.add_term(hybrid, 0.2)\nct_painting.lhs.add_term(hybrid, 0.2);", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWe can now compute the new production plan for our 3 products", "apps": [], "results": {"msg": [{"data": "<p>We can now compute the new production plan for our 3 products</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmsol = m.solve()\nassert msol is not None, \"model can't solve\"\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nLet's now say we improved our painting process, the distribution of the coefficients in the painting limits is not [0.5, 0.4, 0.2] anymore but [0.1, 0.1, 0.1]\nWhen you have the hand on an expression, you can modify the coefficient variable by variable with set_coefficient or via a list of (variable, coeff) with set_coefficients", "apps": [], "results": {"msg": [{"data": "<p>Let's now say we improved our painting process, the distribution of the coefficients in the painting limits is not [0.5, 0.4, 0.2] anymore but [0.1, 0.1, 0.1]</p>\n<p>When you have the hand on an expression, you can modify the coefficient variable by variable with set<em>coefficient or via a list of (variable, coeff) with set</em>coefficients</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nct_painting.lhs.set_coefficients([(desk, 0.1), (cell, 0.1), (hybrid, 0.1)])", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmsol = m.solve()\nassert msol is not None, \"model can't solve\"\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Relaxations", "apps": [], "results": {"msg": [{"data": "<h4>Relaxations</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nLet's now introduce a new constraint: polishing time limit. ", "apps": [], "results": {"msg": [{"data": "<p>Let's now introduce a new constraint: polishing time limit. </p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# constraint: polishing time limit\nct_polishing = m.add_constraint( 0.6 * desk + 0.6 * cell + 0.3 * hybrid <= 290, \"polishing_limit\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmsol = m.solve()\nif msol is None:\n    print(\"model can't solve\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe model is now infeasible. We need to handle it and dig into the infeasibilities.", "apps": [], "results": {"msg": [{"data": "<p>The model is now infeasible. We need to handle it and dig into the infeasibilities.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nYou can now use the Relaxer object. You can control the way it will relax the constraints or you can use 1 of the various automatic modes:\n- 'all' relaxes all constraints using a MEDIUM priority; this is the default.\n- 'named' relaxes all constraints with a user name but not the others.\n- 'match' looks for priority names within constraint names; unnamed constraints are not relaxed.\n\nWe will use the 'match' mode.\nPolishing constraint is mandatory.\nPainting constraint is a nice to have.\nAssembly constraint has low priority.", "apps": [], "results": {"msg": [{"data": "<p>You can now use the Relaxer object. You can control the way it will relax the constraints or you can use 1 of the various automatic modes:</p>\n<ul>\n<li>'all' relaxes all constraints using a MEDIUM priority; this is the default.</li>\n</ul>\n<ul>\n<li>'named' relaxes all constraints with a user name but not the others.</li>\n</ul>\n<ul>\n<li>'match' looks for priority names within constraint names; unnamed constraints are not relaxed.</li>\n</ul>\n<p></p>\n<p>We will use the 'match' mode.</p>\n<p>Polishing constraint is mandatory.</p>\n<p>Painting constraint is a nice to have.</p>\n<p>Assembly constraint has low priority.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nct_polishing.name = \"high_\"+ct_polishing.name\nct_assembly.name = \"low_\"+ct_assembly.name\nct_painting.name = \"medium_\"+ct_painting.name", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# if a name contains \"low\", it has priority LOW\n# if a ct name contains \"medium\" it has priority MEDIUM\n# same for HIGH\n# if a constraint has no name or does not match any, it is not relaxable.\nfrom docplex.mp.relaxer import Relaxer\nrelaxer = Relaxer(prioritizer='match', verbose=True)\n\nrelaxed_sol = relaxer.relax(m)\nrelaxed_ok = relaxed_sol is not None\nassert relaxed_ok, \"relaxation failed\"\nrelaxer.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nct_polishing_relax = relaxer.get_relaxation(ct_polishing)\nprint(\"* found slack of {0} for polish ct\".format(ct_polishing_relax))\nct_polishing.rhs+= ct_polishing_relax\nm.solve()\nm.report()\nm.print_solution()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Summary\n\n\nYou learned how to set up and use the IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and modify it in various ways.", "apps": [], "results": {"msg": [{"data": "<h2>Summary</h2>\n<p></p>\n<p></p>\n<p>You learned how to set up and use the IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and modify it in various ways.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### References\n* [Decision Optimization CPLEX Modeling for Python documentation](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)\n* [Decision Optimization on Cloud](https://developer.ibm.com/docloud/)\n* Need help with DOcplex or to report a bug? Please go [here](https://developer.ibm.com/answers/smartspace/docloud)\n* Contact us at dofeedback@wwpdl.vnet.ibm.com\"\n", "apps": [], "results": {"msg": [{"data": "<h4>References</h4>\n<ul>\n<li><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Decision Optimization CPLEX Modeling for Python documentation</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.ibm.com/docloud/\">Decision Optimization on Cloud</a></li>\n</ul>\n<ul>\n<li>Need help with DOcplex or to report a bug? Please go <a href=\"https://developer.ibm.com/answers/smartspace/docloud\">here</a></li>\n</ul>\n<ul>\n<li>Contact us at dofeedback@wwpdl.vnet.ibm.com\"</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nCopyright \u00a9 2017-2018 IBM. Sample Materials.", "apps": [], "results": {"msg": [{"data": "<p>Copyright \u00a9 2017-2018 IBM. Sample Materials.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}]}