{"info": {}, "config": {"looknfeel": "default", "personalizedMode": "false"}, "name": "C:\\Users\\AURELIEFolacci\\python\\workspace\\docplex\\docplex\\src\\samples\\examples\\delivery\\jupyter\\Progress_callbacks", "paragraphs": [{"settings": {"forms": {}, "params": {}}, "text": "%md\n# Using the Progress Callbacks with CPLEX Optimizer\n\nThis tutorial includes everything you need to set up decision optimization engines, build a mathematical programming model, then use the progress callbacks to follow the progress, capture the intermediate solutions and stop the solve on your own criteria.\n\n\nWhen you finish this tutorial, you'll have a foundational knowledge of _Prescriptive Analytics_.\n\n>This notebook is part of the **[Prescriptive Analytics for Python](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)**\n\n>It requires an [installation of CPLEX Optimizers](http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html)\n\nDiscover us [here](https://developer.ibm.com/docloud)\n\n\nTable of contents:\n\n-  Describe the business problem\n*  How decision optimization (prescriptive analytics) can help\n*  Use decision optimization\n    *  Step 1: Import the library\n    *  Step 2: Set up the prescriptive model\n    *  Step 3: Track the CPLEX progress\n*  Summary\n****", "apps": [], "results": {"msg": [{"data": "<h1>Using the Progress Callbacks with CPLEX Optimizer</h1>\n<p></p>\n<p>This tutorial includes everything you need to set up decision optimization engines, build a mathematical programming model, then use the progress callbacks to follow the progress, capture the intermediate solutions and stop the solve on your own criteria.</p>\n<p></p>\n<p></p>\n<p>When you finish this tutorial, you'll have a foundational knowledge of <em>Prescriptive Analytics</em>.</p>\n<p></p>\n<blockquote>\n  <p>This notebook is part of the <strong><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Prescriptive Analytics for Python</a></strong></p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p>It requires an <a href=\"http://ibmdecisionoptimization.github.io/docplex-doc/getting_started.html\">installation of CPLEX Optimizers</a></p>\n</blockquote>\n<p></p>\n<p>Discover us <a href=\"https://developer.ibm.com/docloud\">here</a></p>\n<p></p>\n<p></p>\n<p>Table of contents:</p>\n<p></p>\n<ul>\n<li>Describe the business problem</li>\n</ul>\n<ul>\n<li>How decision optimization (prescriptive analytics) can help</li>\n</ul>\n<ul>\n<li>Use decision optimization</li>\n</ul>\n<pre><code>*  Step 1: Import the library\n</code></pre>\n<pre><code>*  Step 2: Set up the prescriptive model\n</code></pre>\n<pre><code>*  Step 3: Track the CPLEX progress\n</code></pre>\n<ul>\n<li>Summary</li>\n</ul>\n<hr />\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## How  decision optimization can help\n\n* Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  \n\n* Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  \n\n* Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  \n<br/>\n\n<u>With prescriptive analytics, you can:</u> \n\n* Automate the complex decisions and trade-offs to better manage your limited resources.\n* Take advantage of a future opportunity or mitigate a future risk.\n* Proactively update recommendations based on changing events.\n* Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.\n\n", "apps": [], "results": {"msg": [{"data": "<h2>How  decision optimization can help</h2>\n<p></p>\n<ul>\n<li>Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  </li>\n</ul>\n<p><br/></p>\n<p></p>\n<p><u>With prescriptive analytics, you can:</u> </p>\n<p></p>\n<ul>\n<li>Automate the complex decisions and trade-offs to better manage your limited resources.</li>\n</ul>\n<ul>\n<li>Take advantage of a future opportunity or mitigate a future risk.</li>\n</ul>\n<ul>\n<li>Proactively update recommendations based on changing events.</li>\n</ul>\n<ul>\n<li>Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.</li>\n</ul>\n<p></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Use decision optimization", "apps": [], "results": {"msg": [{"data": "<h2>Use decision optimization</h2>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 1: Import the library\n\nRun the following code to import Decision Optimization CPLEX Modeling library.  The *DOcplex* library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.", "apps": [], "results": {"msg": [{"data": "<h3>Step 1: Import the library</h3>\n<p></p>\n<p>Run the following code to import Decision Optimization CPLEX Modeling library.  The <em>DOcplex</em> library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport sys\ntry:\n    import docplex.mp\nexcept:\n    raise Exception('Please install docplex. See https://pypi.org/project/docplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 2: Set up the prescriptive model", "apps": [], "results": {"msg": [{"data": "<h3>Step 2: Set up the prescriptive model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWe will write a scalable model just in order to show how to use the progress callback API.\n\nThis model is not important: it is a model that can take very long to solve and will find multiple intermediate solutions", "apps": [], "results": {"msg": [{"data": "<p>We will write a scalable model just in order to show how to use the progress callback API.</p>\n<p></p>\n<p>This model is not important: it is a model that can take very long to solve and will find multiple intermediate solutions</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.model import Model\n\ndef build_hearts(r, **kwargs):\n    # initialize the model\n    mdl = Model('love_hearts_%d' % r, **kwargs)\n\n    # the dictionary of decision variables, one variable\n    # for each circle with i in (1 .. r) as the row and\n    # j in (1 .. i) as the position within the row    \n    idx = [(i, j) for i in range(1, r + 1) for j in range(1, i + 1)]\n    a = mdl.binary_var_dict(idx, name=lambda idx_tuple: \"a_%d_%d\" % (idx_tuple[0], idx_tuple[1]))\n\n    # the constraints - enumerate all equilateral triangles\n    # and prevent any such triangles being formed by keeping\n    # the number of included circles at its vertexes below 3\n\n    # for each row except the last\n    for i in range(1, r):\n        # for each position in this row\n        for j in range(1, i + 1):\n            # for each triangle of side length (k) with its upper vertex at\n            # (i, j) and its sides parallel to those of the overall shape\n            for k in range(1, r - i + 1):\n                # the sets of 3 points at the same distances clockwise along the\n                # sides of these triangles form k equilateral triangles\n                for m in range(k):\n                    u, v, w = (i + m, j), (i + k, j + m), (i + k - m, j + k - m)\n                    mdl.add_constraint(a[u] + a[v] + a[w] <= 2)\n\n    mdl.maximize(mdl.sum(a))\n    return mdl", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nIt is perfect to demonstrate how to listen to CPLEX during its progress as it contains multiple intermediate solutions.", "apps": [], "results": {"msg": [{"data": "<p>It is perfect to demonstrate how to listen to CPLEX during its progress as it contains multiple intermediate solutions.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 3: Track the CPLEX progress", "apps": [], "results": {"msg": [{"data": "<h3>Step 3: Track the CPLEX progress</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Basic track of the search progress\nWe will use a <i>TextProgressListener</i> to follow the CPLEX search. It will print on the standard output each time an intermediate solution is found.", "apps": [], "results": {"msg": [{"data": "<h4>Basic track of the search progress</h4>\n<p>We will use a <i>TextProgressListener</i> to follow the CPLEX search. It will print on the standard output each time an intermediate solution is found.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm5 = build_hearts(5)\n\nfrom docplex.mp.progress import TextProgressListener\nunfiltered_texter = TextProgressListener(filtering=False)\nm5.add_progress_listener(unfiltered_texter)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Solve with Decision Optimization\n\nIf you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.\n\nYou will get the best solution found after ***n*** seconds, thanks to a time limit parameter.", "apps": [], "results": {"msg": [{"data": "<h4>Solve with Decision Optimization</h4>\n<p></p>\n<p>If you're using a Community Edition of CPLEX runtimes, depending on the size of the problem, the solve stage may fail and will need a paying subscription or product installation.</p>\n<p></p>\n<p>You will get the best solution found after <strong><em>n</em></strong> seconds, thanks to a time limit parameter.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm5.solve(clean_before_solve=True)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nLet's remove the listener.", "apps": [], "results": {"msg": [{"data": "<p>Let's remove the listener.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm5.remove_progress_listener(unfiltered_texter)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Track and store all intermediate solutions", "apps": [], "results": {"msg": [{"data": "<h4>Track and store all intermediate solutions</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nYou just need to subclass the <i>SolutionListener</i> object and specialize the <i>notify_*</i> methods if needed.\nHere we will store all solutions all along the way.", "apps": [], "results": {"msg": [{"data": "<p>You just need to subclass the <i>SolutionListener</i> object and specialize the <i>notify_*</i> methods if needed.</p>\n<p>Here we will store all solutions all along the way.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.progress import SolutionListener\nclass MyProgressListener(SolutionListener):\n    def __init__(self, model):\n        SolutionListener.__init__(self, model)\n        self.solutions = []\n \n    def notify_solution(self, s):\n        SolutionListener.notify_solution(self, s)\n        self.solutions.append(self.current_solution)\n \n    def get_solutions(self):\n        return self.solutions\n    \nkeeper = MyProgressListener(m5)\nm5.add_progress_listener(keeper)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nm5.solve(clean_before_solve=True)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWe have stored <i>docplex.mp.solution.SolveSolution<i> objects.\nWe can iterate on them to query the objective values, the values of each variables...", "apps": [], "results": {"msg": [{"data": "<p>We have stored <i>docplex.mp.solution.SolveSolution<i> objects.</p>\n<p>We can iterate on them to query the objective values, the values of each variables...</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfor s in keeper.get_solutions():\n     print(s.objective_value)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Implement our own aborter\nIt may be nice to be able to abort the CPLEX on your own criteria.\nFor example, when the gap is converging very slowly, it may be a good idea to stop and use the last solution instead of waiting forever.\n\nYou just need to subclass the <i>ProgressListener</i> and specialize the <i>notify_*</i> methods.", "apps": [], "results": {"msg": [{"data": "<h4>Implement our own aborter</h4>\n<p>It may be nice to be able to abort the CPLEX on your own criteria.</p>\n<p>For example, when the gap is converging very slowly, it may be a good idea to stop and use the last solution instead of waiting forever.</p>\n<p></p>\n<p>You just need to subclass the <i>ProgressListener</i> and specialize the <i>notify_*</i> methods.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.progress import ProgressListener\nclass AutomaticAborter(ProgressListener):\n    def __init__(self, max_no_solutions=10):\n        self.last_incumbent_obj = -999999999\n        self.nb_solutions = 0\n        self.nb_non_improving = 0\n        self.max_non_improving = max_no_solutions\n\n    def notify_progress(self, progress_data):\n        super(AutomaticAborter, self).notify_progress(progress_data)\n        last_obj = self.last_incumbent_obj\n        if progress_data.has_incumbent:\n            if last_obj is None or progress_data.current_objective >= last_obj + 1e-5:\n                self.nb_solutions += 1\n                self.nb_non_improving = 0\n                print('----> #solutions={}'.format(self.nb_solutions))\n            else:\n\n                # non improving move\n                self.nb_non_improving += 1\n                print('----> #non improving solutions={}'.format(self.nb_non_improving))\n            self.last_incumbent_obj = progress_data.current_objective\n        else:\n            self.nb_non_improving += 1\n        if self.nb_non_improving >= self.max_non_improving:\n            if not self.has_aborted():\n                print('!! aborting cplex, #solutions={0}, #non-improving: {1}'.format(self.nb_solutions,\n                                                                                              self.nb_non_improving))\n            self.abort()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nLet's build a bigger problem with more solutions.", "apps": [], "results": {"msg": [{"data": "<p>Let's build a bigger problem with more solutions.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nlove14 = build_hearts(11)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nauto_abort = AutomaticAborter(max_no_solutions=50)\nlove14.add_progress_listener(auto_abort)\n\nlove14.solve()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Summary\n\n\nYou learned how to set up and use the IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and track its progress.", "apps": [], "results": {"msg": [{"data": "<h2>Summary</h2>\n<p></p>\n<p></p>\n<p>You learned how to set up and use the IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and track its progress.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### References\n* [Decision Optimization CPLEX Modeling for Python documentation](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)\n* [Decision Optimization on Cloud](https://developer.ibm.com/docloud/)\n* Need help with DOcplex or to report a bug? Please go [here](https://developer.ibm.com/answers/smartspace/docloud)\n* Contact us at dofeedback@wwpdl.vnet.ibm.com\"\n", "apps": [], "results": {"msg": [{"data": "<h4>References</h4>\n<ul>\n<li><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Decision Optimization CPLEX Modeling for Python documentation</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.ibm.com/docloud/\">Decision Optimization on Cloud</a></li>\n</ul>\n<ul>\n<li>Need help with DOcplex or to report a bug? Please go <a href=\"https://developer.ibm.com/answers/smartspace/docloud\">here</a></li>\n</ul>\n<ul>\n<li>Contact us at dofeedback@wwpdl.vnet.ibm.com\"</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nCopyright \u00a9 2017-2018 IBM. Sample Materials.", "apps": [], "results": {"msg": [{"data": "<p>Copyright \u00a9 2017-2018 IBM. Sample Materials.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}]}