{"info": {}, "config": {"looknfeel": "default", "personalizedMode": "false"}, "name": "C:\\Users\\AURELIEFolacci\\python\\workspace\\docplex\\docplex\\src\\samples\\examples\\delivery\\jupyter\\boxes", "paragraphs": [{"settings": {"forms": {}, "params": {}}, "text": "%md\n# Objects in boxes\n\nThis tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on the cloud with IBM ILOG CPLEX Optimizer.\n\nWhen you finish this tutorial, you'll have a foundational knowledge of _Prescriptive Analytics_.\n\n>This notebook is part of [Prescriptive Analytics for Python](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html).\n\n>Running the sample requires the installation of\n    [CPLEX Optimization studio](https://www.ibm.com/products/ilog-cplex-optimization-studio)\n    (Commercial or free \n    [CPLEX Community edition](https://www.ibm.com/account/reg/us-en/signup?formid=urx-20028>`)).\n    This sample automatically installs *CPLEX CE* if needed.\n\n\nTable of contents:\n\n* Describe the business problem\n* How decision optimization (prescriptive analytics) can help\n* Use decision optimization\n    * Step 1: Import the library\n    * Step 2: Model the data\n    * Step 3: Prepare the data\n    * Step 4: Set up the prescriptive model\n        * Define the decision variables\n        * Express the business constraints\n        * Express the objective\n        * Solve with Decision Optimization\n    * Step 5: Investigate the solution and run an example analysis\n* Summary\n\n****", "apps": [], "results": {"msg": [{"data": "<h1>Objects in boxes</h1>\n<p></p>\n<p>This tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on the cloud with IBM ILOG CPLEX Optimizer.</p>\n<p></p>\n<p>When you finish this tutorial, you'll have a foundational knowledge of <em>Prescriptive Analytics</em>.</p>\n<p></p>\n<blockquote>\n  <p>This notebook is part of <a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Prescriptive Analytics for Python</a>.</p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p>Running the sample requires the installation of</p>\n</blockquote>\n<pre><code>[CPLEX Optimization studio](https://www.ibm.com/products/ilog-cplex-optimization-studio)\n</code></pre>\n<pre><code>(Commercial or free\n</code></pre>\n<pre><code>[CPLEX Community edition](https://www.ibm.com/account/reg/us-en/signup?formid=urx-20028&gt;`)).\n</code></pre>\n<pre><code>This sample automatically installs *CPLEX CE* if needed.\n</code></pre>\n<p></p>\n<p></p>\n<p>Table of contents:</p>\n<p></p>\n<ul>\n<li>Describe the business problem</li>\n</ul>\n<ul>\n<li>How decision optimization (prescriptive analytics) can help</li>\n</ul>\n<ul>\n<li>Use decision optimization</li>\n</ul>\n<pre><code>* Step 1: Import the library\n</code></pre>\n<pre><code>* Step 2: Model the data\n</code></pre>\n<pre><code>* Step 3: Prepare the data\n</code></pre>\n<pre><code>* Step 4: Set up the prescriptive model\n</code></pre>\n<pre><code>    * Define the decision variables\n</code></pre>\n<pre><code>    * Express the business constraints\n</code></pre>\n<pre><code>    * Express the objective\n</code></pre>\n<pre><code>    * Solve with Decision Optimization\n</code></pre>\n<pre><code>* Step 5: Investigate the solution and run an example analysis\n</code></pre>\n<ul>\n<li>Summary</li>\n</ul>\n<p></p>\n<hr />\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Describe the business problem\n\n* We wish to put $N$ objects which are scattered in the plane, into a row of $N$ boxes.\n\n* Boxes are aligned from left to right (if $i < i'$, box $i$ is to the left of box $i'$) on the $x$ axis.\n* Box $i$ is located at a point $B_i$ of the $(x,y)$ plane and object $j$ is located at $O_j$.\n\n\n* We want to find an arrangement of objects such that:\n    * each box contains exactly one object,\n    * each object is stored in one box,\n    * the total distance from object $j$ to its storage box is minimal.\n\n\n* First, we solve the problem described, and then we add two new constraints and examine how the cost (and solution) changes.\n    * From the first solution, we impose that object #1 is assigned to the box immediately to the left of object #2.\n    * Then we impose that object #5 is assigned to a box next to the box of object #6.", "apps": [], "results": {"msg": [{"data": "<h2>Describe the business problem</h2>\n<p></p>\n<ul>\n<li>We wish to put $N$ objects which are scattered in the plane, into a row of $N$ boxes.</li>\n</ul>\n<p></p>\n<ul>\n<li>Boxes are aligned from left to right (if $i &lt; i'$, box $i$ is to the left of box $i'$) on the $x$ axis.</li>\n</ul>\n<ul>\n<li>Box $i$ is located at a point $B<em>i$ of the $(x,y)$ plane and object $j$ is located at $O</em>j$.</li>\n</ul>\n<p></p>\n<p></p>\n<ul>\n<li>We want to find an arrangement of objects such that:</li>\n</ul>\n<pre><code>* each box contains exactly one object,\n</code></pre>\n<pre><code>* each object is stored in one box,\n</code></pre>\n<pre><code>* the total distance from object $j$ to its storage box is minimal.\n</code></pre>\n<p></p>\n<p></p>\n<ul>\n<li>First, we solve the problem described, and then we add two new constraints and examine how the cost (and solution) changes.</li>\n</ul>\n<pre><code>* From the first solution, we impose that object #1 is assigned to the box immediately to the left of object #2.\n</code></pre>\n<pre><code>* Then we impose that object #5 is assigned to a box next to the box of object #6.\n</code></pre>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## How  decision optimization can help\n\n* Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  \n\n* Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  \n\n* Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  \n<br/>\n\n<u>With prescriptive analytics, you can:</u> \n\n* Automate the complex decisions and trade-offs to better manage your limited resources.\n* Take advantage of a future opportunity or mitigate a future risk.\n* Proactively update recommendations based on changing events.\n* Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.", "apps": [], "results": {"msg": [{"data": "<h2>How  decision optimization can help</h2>\n<p></p>\n<ul>\n<li>Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  </li>\n</ul>\n<p><br/></p>\n<p></p>\n<p><u>With prescriptive analytics, you can:</u> </p>\n<p></p>\n<ul>\n<li>Automate the complex decisions and trade-offs to better manage your limited resources.</li>\n</ul>\n<ul>\n<li>Take advantage of a future opportunity or mitigate a future risk.</li>\n</ul>\n<ul>\n<li>Proactively update recommendations based on changing events.</li>\n</ul>\n<ul>\n<li>Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Use decision optimization", "apps": [], "results": {"msg": [{"data": "<h2>Use decision optimization</h2>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 1: Import the library\n\nRun the following code to import the Decision Optimization CPLEX Modeling library.  The *DOcplex* library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.", "apps": [], "results": {"msg": [{"data": "<h3>Step 1: Import the library</h3>\n<p></p>\n<p>Run the following code to import the Decision Optimization CPLEX Modeling library.  The <em>DOcplex</em> library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport sys\ntry:\n    import docplex.mp\nexcept:\n    raise Exception('Please install docplex. See https://pypi.org/project/docplex/')      ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nIf *CPLEX* is not installed, install CPLEX Community edition.", "apps": [], "results": {"msg": [{"data": "<p>If <em>CPLEX</em> is not installed, install CPLEX Community edition.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ntry:\n    import cplex\nexcept:\n    raise Exception('Please install CPLEX. See https://pypi.org/project/cplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 2: Model the data\n\nThe input data is the number of objects (and boxes) _N_, and their positions in the (x,y) plane.\n\n### Step 3: Prepare the data\n\nWe use Euclidean distance to compute the distance between an object and its assigned box.\n\n", "apps": [], "results": {"msg": [{"data": "<h3>Step 2: Model the data</h3>\n<p></p>\n<p>The input data is the number of objects (and boxes) <em>N</em>, and their positions in the (x,y) plane.</p>\n<p></p>\n<h3>Step 3: Prepare the data</h3>\n<p></p>\n<p>We use Euclidean distance to compute the distance between an object and its assigned box.</p>\n<p></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom math import sqrt\n\nN = 15\nbox_range = range(1, N+1)\nobj_range = range(1, N+1)\n\nimport random\n\no_xmax = N*10\no_ymax = 2*N\nbox_coords = {b: (10*b, 1) for b in box_range}\n\nobj_coords= {1: (140, 6), 2: (146, 8), 3: (132, 14), 4: (53, 28), \n             5: (146, 4), 6: (137, 13), 7: (95, 12), 8: (68, 9), 9: (102, 18), \n             10: (116, 8), 11: (19, 29), 12: (89, 15), 13: (141, 4), 14: (29, 4), 15: (4, 28)}\n\n# the distance matrix from box i to object j\n# actually we compute the square of distance to keep integer\n# this does not change the essence of the problem\ndistances = {}\nfor o in obj_range:\n    for b in box_range:\n        dx = obj_coords[o][0]-box_coords[b][0]\n        dy = obj_coords[o][1]-box_coords[b][1]\n        d2 = dx*dx + dy*dy\n        distances[b, o] = d2", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 4: Set up the prescriptive model", "apps": [], "results": {"msg": [{"data": "<h3>Step 4: Set up the prescriptive model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.environment import Environment\nenv = Environment()\nenv.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Create the DOcplex model\nThe model contains all the business constraints and defines the objective.", "apps": [], "results": {"msg": [{"data": "<h4>Create the DOcplex model</h4>\n<p>The model contains all the business constraints and defines the objective.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.model import Model\n\nmdl = Model(\"boxes\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Define the decision variables\n\n* For each box $i$ ($i$ in $1..N$) and object $j$ ($j$ in $1..N$), we define a binary variable $X_{i,j}$ equal to $1$ if and only if object $j$ is stored in box $i$.", "apps": [], "results": {"msg": [{"data": "<h4>Define the decision variables</h4>\n<p></p>\n<ul>\n<li>For each box $i$ ($i$ in $1..N$) and object $j$ ($j$ in $1..N$), we define a binary variable $X_{i,j}$ equal to $1$ if and only if object $j$ is stored in box $i$.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# decision variables is a 2d-matrix\nx = mdl.binary_var_matrix(box_range, obj_range, lambda ij: \"x_%d_%d\" %(ij[0], ij[1]))", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the business constraints\n\n* The sum of $X_{i,j}$ over both rows and columns must be equal to $1$, resulting in $2\\times N$ constraints.", "apps": [], "results": {"msg": [{"data": "<h4>Express the business constraints</h4>\n<p></p>\n<ul>\n<li>The sum of $X_{i,j}$ over both rows and columns must be equal to $1$, resulting in $2\\times N$ constraints.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# one object per box\nmdl.add_constraints(mdl.sum(x[i,j] for j in obj_range) == 1\n                   for i in box_range)\n    \n# one box for each object\nmdl.add_constraints(mdl.sum(x[i,j] for i in box_range) == 1\n                  for j in obj_range)\n\nmdl.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the objective\n\n* The objective is to minimize the total distance between each object and its storage box.", "apps": [], "results": {"msg": [{"data": "<h4>Express the objective</h4>\n<p></p>\n<ul>\n<li>The objective is to minimize the total distance between each object and its storage box.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# minimize total displacement\nmdl.minimize( mdl.sum(distances[i,j] * x[i,j] for i in box_range for j in obj_range) )", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Solve with the model\n", "apps": [], "results": {"msg": [{"data": "<h4>Solve with the model</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmdl.print_information()\n\nassert mdl.solve(), \"!!! Solve of the model fails\"", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmdl.report()\nd1 = mdl.objective_value\n#mdl.print_solution()\n\ndef make_solution_vector(x_vars):\n    sol = [0]* N\n    for i in box_range:\n        for j in obj_range:\n            if x[i,j].solution_value >= 0.5:\n                sol[i-1] = j\n                break\n    return sol\n\ndef make_obj_box_dir(sol_vec):\n    # sol_vec contains an array of objects in box order at slot b-1 we have obj(b)\n    return { sol_vec[b]: b+1 for b in range(N)}\n\nsol1 = make_solution_vector(x)\nprint(\"* solution: {0!s}\".format(sol1))          ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Additional constraint #1\n\nAs an additional constraint, we want to impose that object #1 is stored immediately to the left of object #2.\nAs a consequence, object #2 cannot be stored in box #1, so we add:", "apps": [], "results": {"msg": [{"data": "<h4>Additional constraint #1</h4>\n<p></p>\n<p>As an additional constraint, we want to impose that object #1 is stored immediately to the left of object #2.</p>\n<p>As a consequence, object #2 cannot be stored in box #1, so we add:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmdl.add_constraint(x[1,2] == 0)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nNow, we must state that for $k \\geq 2$ if $x[k,2] == 1$ then $x[k-1,1] == 1$; this is a logical implication that we express by a relational operator:", "apps": [], "results": {"msg": [{"data": "<p>Now, we must state that for $k \\geq 2$ if $x[k,2] == 1$ then $x[k-1,1] == 1$; this is a logical implication that we express by a relational operator:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmdl.add_constraints(x[k-1,1] >= x[k,2]\n                   for k in range(2,N+1))\nmdl.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nNow let's solve again and check that our new constraint is satisfied, that is, object #1 is immediately left to object #2", "apps": [], "results": {"msg": [{"data": "<p>Now let's solve again and check that our new constraint is satisfied, that is, object #1 is immediately left to object #2</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nok2 = mdl.solve()\nassert ok2, \"solve failed\"\nmdl.report()\nd2 = mdl.objective_value\nsol2 = make_solution_vector(x)\nprint(\" solution #2 ={0!s}\".format(sol2))", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe constraint is indeed satisfied, with a higher objective, as expected.", "apps": [], "results": {"msg": [{"data": "<p>The constraint is indeed satisfied, with a higher objective, as expected.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Additional constraint #2\n\nNow, we want to add a second constraint to state that object #5 is stored in a box that is next to the box of object #6, either to the left or right.\n\nIn other words, when $x[k,6]$ is equal to $1$, then one of $x[k-1,5]$ and $x[k+1,5]$ is equal to $1$;\nthis is again a logical implication, with an OR in the right side.\n\nWe have to handle the case of extremities with care.", "apps": [], "results": {"msg": [{"data": "<h4>Additional constraint #2</h4>\n<p></p>\n<p>Now, we want to add a second constraint to state that object #5 is stored in a box that is next to the box of object #6, either to the left or right.</p>\n<p></p>\n<p>In other words, when $x[k,6]$ is equal to $1$, then one of $x[k-1,5]$ and $x[k+1,5]$ is equal to $1$;</p>\n<p>this is again a logical implication, with an OR in the right side.</p>\n<p></p>\n<p>We have to handle the case of extremities with care.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# forall k in 2..N-1 then we can use the sum on the right hand side\nmdl.add_constraints(x[k,6] <= x[k-1,5] + x[k+1,5]\n                  for k in range(2,N))\n    \n# if 6 is in box 1 then 5 must be in 2\nmdl.add_constraint(x[1,6] <= x[2,5])\n\n# if 6 is last, then 5 must be before last\nmdl.add_constraint(x[N,6] <= x[N-1,5])\n\n# we solve again\nok3 = mdl.solve()\nassert ok3, \"solve failed\"\nmdl.report()\nd3 = mdl.objective_value\n\nsol3 = make_solution_vector(x)\nprint(\" solution #3 ={0!s}\".format(sol3)) ", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nAs expected, the constraint is satisfied; objects #5 and #6 are next to each other.\nPredictably, the objective is higher.\n\n### Step 5: Investigate the solution and then run an example analysis\n\nPresent the solution as a vector of object indices, sorted by box indices.\nWe use maptplotlib to display the assignment of objects to boxes.\n", "apps": [], "results": {"msg": [{"data": "<p>As expected, the constraint is satisfied; objects #5 and #6 are next to each other.</p>\n<p>Predictably, the objective is higher.</p>\n<p></p>\n<h3>Step 5: Investigate the solution and then run an example analysis</h3>\n<p></p>\n<p>Present the solution as a vector of object indices, sorted by box indices.</p>\n<p>We use maptplotlib to display the assignment of objects to boxes.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport matplotlib.pyplot as plt\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 12, 6\n\ndef display_solution(sol):\n    obj_boxes = make_obj_box_dir(sol)\n    xs = []\n    ys = []\n    for o in obj_range:\n        b = obj_boxes[o]\n        box_x = box_coords[b][0]\n        box_y = box_coords[b][1]\n        obj_x = obj_coords[o][0]\n        obj_y = obj_coords[o][1]\n        plt.text(obj_x, obj_y, str(o), bbox=dict(facecolor='red', alpha=0.5))\n        plt.plot([obj_x, box_x], [obj_y, box_y])\n", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe first solution shows no segments crossing, which is to be expected.", "apps": [], "results": {"msg": [{"data": "<p>The first solution shows no segments crossing, which is to be expected.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndisplay_solution(sol1)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe second solution, by enforcing that object #1 must be to the left of object #2, introduces crossings.", "apps": [], "results": {"msg": [{"data": "<p>The second solution, by enforcing that object #1 must be to the left of object #2, introduces crossings.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndisplay_solution(sol2)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndisplay_solution(sol3)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n\ndef display(myDict, title):\n    if True: #env.has_matplotlib:\n        N = len(myDict)\n        labels = myDict.keys()\n        values= myDict.values()\n        try: # Python 2\n            ind = xrange(N)  # the x locations for the groups\n        except: # Python 3\n            ind = range(N)\n        width = 0.2      # the width of the bars\n        fig, ax = plt.subplots()\n        rects1 = ax.bar(ind, values, width, color='g')\t\n        ax.set_title(title)\n        ax.set_xticks([ind[i]+width/2 for i in ind])\n        ax.set_xticklabels( labels )\t\n        #ax.legend( (rects1[0]), (title) )\n        plt.show()\n    else:\n        print(\"warning: no display\")\n\nfrom collections import OrderedDict\ndists = OrderedDict()\ndists[\"d1\"]= d1 -8000\ndists[\"d2\"] = d2 - 8000\ndists[\"d3\"] = d3 - 8000\nprint(dists)\n\ndisplay(dists, \"evolution of distance objective\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Summary\n\nYou learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with CPLEX.", "apps": [], "results": {"msg": [{"data": "<h2>Summary</h2>\n<p></p>\n<p>You learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with CPLEX.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## References\n* [CPLEX Modeling for Python documentation](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)\n* [Decision Optimization on Cloud](https://developer.ibm.com/docloud/)\n* Need help with DOcplex or to report a bug? Please go [here](https://developer.ibm.com/answers/smartspace/docloud).\n* Contact us at dofeedback@wwpdl.vnet.ibm.com.", "apps": [], "results": {"msg": [{"data": "<h2>References</h2>\n<ul>\n<li><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">CPLEX Modeling for Python documentation</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.ibm.com/docloud/\">Decision Optimization on Cloud</a></li>\n</ul>\n<ul>\n<li>Need help with DOcplex or to report a bug? Please go <a href=\"https://developer.ibm.com/answers/smartspace/docloud\">here</a>.</li>\n</ul>\n<ul>\n<li>Contact us at dofeedback@wwpdl.vnet.ibm.com.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nCopyright \u00a9 2017 IBM. IPLA licensed Sample Materials.", "apps": [], "results": {"msg": [{"data": "<p>Copyright \u00a9 2017 IBM. IPLA licensed Sample Materials.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}]}