{"info": {}, "config": {"looknfeel": "default", "personalizedMode": "false"}, "name": "C:\\Users\\AURELIEFolacci\\python\\workspace\\docplex\\docplex\\src\\samples\\examples\\delivery\\jupyter\\mining_pandas", "paragraphs": [{"settings": {"forms": {}, "params": {}}, "text": "%md\n# Optimizing mining operations\n\nThis tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on Cloud with IBM ILOG CPLEX Optimizer.\n\nWhen you finish this tutorial, you'll have a foundational knowledge of _Prescriptive Analytics_.\n\n>This notebook is part of [Prescriptive Analytics for Python](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html).\n\n>Running the sample requires the installation of\n    [CPLEX Optimization studio](https://www.ibm.com/products/ilog-cplex-optimization-studio)\n    (Commercial or free \n    [CPLEX Community edition](https://www.ibm.com/account/reg/us-en/signup?formid=urx-20028>`)).\n    This sample automatically installs *CPLEX CE* if needed.\n\n\nTable of contents:\n\n-  Describe the business problem\n*  How decision optimization (prescriptive analytics) can help\n*  Use decision optimization\n    *  Step 1: Import the library\n    -  Step 2: Model the data\n    *  Step 3: Prepare the data\n    -  Step 4: Set up the prescriptive model\n        * Define the decision variables\n        * Express the business constraints\n        * Express the objective\n        * Solve with Decision Optimization\n    *  Step 5: Investigate the solution and run an example analysis\n*  Summary\n\n****", "apps": [], "results": {"msg": [{"data": "<h1>Optimizing mining operations</h1>\n<p></p>\n<p>This tutorial includes everything you need to set up IBM Decision Optimization CPLEX Modeling for Python (DOcplex), build a Mathematical Programming model, and get its solution by solving the model on Cloud with IBM ILOG CPLEX Optimizer.</p>\n<p></p>\n<p>When you finish this tutorial, you'll have a foundational knowledge of <em>Prescriptive Analytics</em>.</p>\n<p></p>\n<blockquote>\n  <p>This notebook is part of <a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">Prescriptive Analytics for Python</a>.</p>\n</blockquote>\n<p></p>\n<blockquote>\n  <p>Running the sample requires the installation of</p>\n</blockquote>\n<pre><code>[CPLEX Optimization studio](https://www.ibm.com/products/ilog-cplex-optimization-studio)\n</code></pre>\n<pre><code>(Commercial or free\n</code></pre>\n<pre><code>[CPLEX Community edition](https://www.ibm.com/account/reg/us-en/signup?formid=urx-20028&gt;`)).\n</code></pre>\n<pre><code>This sample automatically installs *CPLEX CE* if needed.\n</code></pre>\n<p></p>\n<p></p>\n<p>Table of contents:</p>\n<p></p>\n<ul>\n<li>Describe the business problem</li>\n</ul>\n<ul>\n<li>How decision optimization (prescriptive analytics) can help</li>\n</ul>\n<ul>\n<li>Use decision optimization</li>\n</ul>\n<pre><code>*  Step 1: Import the library\n</code></pre>\n<pre><code>-  Step 2: Model the data\n</code></pre>\n<pre><code>*  Step 3: Prepare the data\n</code></pre>\n<pre><code>-  Step 4: Set up the prescriptive model\n</code></pre>\n<pre><code>    * Define the decision variables\n</code></pre>\n<pre><code>    * Express the business constraints\n</code></pre>\n<pre><code>    * Express the objective\n</code></pre>\n<pre><code>    * Solve with Decision Optimization\n</code></pre>\n<pre><code>*  Step 5: Investigate the solution and run an example analysis\n</code></pre>\n<ul>\n<li>Summary</li>\n</ul>\n<p></p>\n<hr />\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Describe the business problem\n\nThis mining operations optimization problem is an implementation of Problem 7 from \"Model Building in Mathematical Programming\" by\nH.P. Williams. \nThe operational decisions that need to be made are which mines should be operated each year and\nhow much each mine should produce.\n", "apps": [], "results": {"msg": [{"data": "<h2>Describe the business problem</h2>\n<p></p>\n<p>This mining operations optimization problem is an implementation of Problem 7 from \"Model Building in Mathematical Programming\" by</p>\n<p>H.P. Williams. </p>\n<p>The operational decisions that need to be made are which mines should be operated each year and</p>\n<p>how much each mine should produce.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Business constraints\n\n * A mine that is closed cannot be worked.\n * Once closed, a mine stays closed until the end of the horizon.\n * Each year, a maximum number of mines can be worked.\n * For each mine and year, the quantity extracted is limited by the mine's maximum extracted quantity.\n * The average blend quality must be greater than or equal to the requirement of the year.\n \n### Objective and KPIs\n\n#### Total actualized  revenue\n\nEach year, the total revenue is equal to the total quantity extracted multiplied by the blend price. The time series of revenues is aggregated in one expected revenue by applying the discount rate; in other terms, a revenue of \\$1000 next year is counted as \\$900 actualized, \\$810 if the revenue is expected in two years, etc.\n\n#### Total expected royalties\n\nA mine that stays open must pay royalties (see the column **royalties** in the DataFrame). Again, royalties from different years are actualized using the discount rate.\n\n#### Business objective\n\nThe business objective is to maximize the net actualized profit, that is the difference between the total actualized revenue and total actualized royalties.", "apps": [], "results": {"msg": [{"data": "<h3>Business constraints</h3>\n<p></p>\n<ul>\n<li>A mine that is closed cannot be worked.</li>\n</ul>\n<ul>\n<li>Once closed, a mine stays closed until the end of the horizon.</li>\n</ul>\n<ul>\n<li>Each year, a maximum number of mines can be worked.</li>\n</ul>\n<ul>\n<li>For each mine and year, the quantity extracted is limited by the mine's maximum extracted quantity.</li>\n</ul>\n<ul>\n<li>The average blend quality must be greater than or equal to the requirement of the year.</li>\n</ul>\n<p></p>\n<h3>Objective and KPIs</h3>\n<p></p>\n<h4>Total actualized  revenue</h4>\n<p></p>\n<p>Each year, the total revenue is equal to the total quantity extracted multiplied by the blend price. The time series of revenues is aggregated in one expected revenue by applying the discount rate; in other terms, a revenue of \\$1000 next year is counted as \\$900 actualized, \\$810 if the revenue is expected in two years, etc.</p>\n<p></p>\n<h4>Total expected royalties</h4>\n<p></p>\n<p>A mine that stays open must pay royalties (see the column <strong>royalties</strong> in the DataFrame). Again, royalties from different years are actualized using the discount rate.</p>\n<p></p>\n<h4>Business objective</h4>\n<p></p>\n<p>The business objective is to maximize the net actualized profit, that is the difference between the total actualized revenue and total actualized royalties.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## How  decision optimization can help\n\n* Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  \n\n* Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  \n\n* Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  \n<br/>\n\n<u>With prescriptive analytics, you can:</u> \n\n* Automate the complex decisions and trade-offs to better manage your limited resources.\n* Take advantage of a future opportunity or mitigate a future risk.\n* Proactively update recommendations based on changing events.\n* Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.", "apps": [], "results": {"msg": [{"data": "<h2>How  decision optimization can help</h2>\n<p></p>\n<ul>\n<li>Prescriptive analytics (decision optimization) technology recommends actions that are based on desired outcomes.  It takes into account specific scenarios, resources, and knowledge of past and current events. With this insight, your organization can make better decisions and have greater control of business outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics is the next step on the path to insight-based actions. It creates value through synergy with predictive analytics, which analyzes data to predict future outcomes.  </li>\n</ul>\n<p></p>\n<ul>\n<li>Prescriptive analytics takes that insight to the next level by suggesting the optimal way to handle that future situation. Organizations that can act fast in dynamic conditions and make superior decisions in uncertain environments gain a strong competitive advantage.  </li>\n</ul>\n<p><br/></p>\n<p></p>\n<p><u>With prescriptive analytics, you can:</u> </p>\n<p></p>\n<ul>\n<li>Automate the complex decisions and trade-offs to better manage your limited resources.</li>\n</ul>\n<ul>\n<li>Take advantage of a future opportunity or mitigate a future risk.</li>\n</ul>\n<ul>\n<li>Proactively update recommendations based on changing events.</li>\n</ul>\n<ul>\n<li>Meet operational goals, increase customer loyalty, prevent threats and fraud, and optimize business processes.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Checking minimum requirements\nThis notebook uses some features of pandas that are available in version 0.17.1 or above.", "apps": [], "results": {"msg": [{"data": "<h2>Checking minimum requirements</h2>\n<p>This notebook uses some features of pandas that are available in version 0.17.1 or above.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport pip\nREQUIRED_MINIMUM_PANDAS_VERSION = '0.17.1'\ntry:\n    import pandas as pd\n    assert pd.__version__ >= REQUIRED_MINIMUM_PANDAS_VERSION\nexcept:\n    raise Exception(\"Version %s or above of Pandas is required to run this notebook\" % REQUIRED_MINIMUM_PANDAS_VERSION)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Use decision optimization", "apps": [], "results": {"msg": [{"data": "<h2>Use decision optimization</h2>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 1: Import the library\n\nRun the following code to import the Decision Optimization CPLEX Modeling library.  The *DOcplex* library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.", "apps": [], "results": {"msg": [{"data": "<h3>Step 1: Import the library</h3>\n<p></p>\n<p>Run the following code to import the Decision Optimization CPLEX Modeling library.  The <em>DOcplex</em> library contains the two modeling packages, Mathematical Programming and Constraint Programming, referred to earlier.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nimport sys\ntry:\n    import docplex.mp\nexcept:\n    raise Exception('Please install docplex. See https://pypi.org/project/docplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nIf *CPLEX* is not installed, install CPLEX Community edition.", "apps": [], "results": {"msg": [{"data": "<p>If <em>CPLEX</em> is not installed, install CPLEX Community edition.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ntry:\n    import cplex\nexcept:\n    raise Exception('Please install CPLEX. See https://pypi.org/project/cplex/')", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 2: Model the data\n#### Mining Data\n\nThe mine data is provided as a *pandas* DataFrame. For each mine, we are given the amount of royalty to pay when operating the mine, its ore quality, and the maximum quantity that we can extract from the mine.\n", "apps": [], "results": {"msg": [{"data": "<h3>Step 2: Model the data</h3>\n<h4>Mining Data</h4>\n<p></p>\n<p>The mine data is provided as a <em>pandas</em> DataFrame. For each mine, we are given the amount of royalty to pay when operating the mine, its ore quality, and the maximum quantity that we can extract from the mine.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# If needed, install the module pandas prior to executing this cell\nimport pandas as pd\nfrom pandas import DataFrame, Series", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_mines = DataFrame({\"royalties\":   [ 5  ,   4,   4, 5  ],\n                      \"ore_quality\": [ 1.0, 0.7, 1.5, 0.5],\n                      \"max_extract\": [ 2  , 2.5, 1.3, 3  ]})\nnb_mines = len(df_mines)\ndf_mines.index.name='range_mines'\ndf_mines", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Blend quality data\n\nEach year, the average blend quality of all ore extracted from the mines\nmust be greater than a minimum quality. This data is provided as a *pandas* Series, the length of which is the plan horizon in years.", "apps": [], "results": {"msg": [{"data": "<h4>Blend quality data</h4>\n<p></p>\n<p>Each year, the average blend quality of all ore extracted from the mines</p>\n<p>must be greater than a minimum quality. This data is provided as a <em>pandas</em> Series, the length of which is the plan horizon in years.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nblend_qualities = Series([0.9, 0.8, 1.2, 0.6, 1.0])\nnb_years = len(blend_qualities)\nprint(\"* Planning mining operations for: {} years\".format(nb_years))\nblend_qualities.describe()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Additional (global) data\n\nWe need extra global data to run our planning model:\n\n * a blend price (supposedly flat),\n * a maximum number of worked mines for any given years (typically 3), and\n * a discount rate to compute the actualized revenue over the horizon.\n ", "apps": [], "results": {"msg": [{"data": "<h4>Additional (global) data</h4>\n<p></p>\n<p>We need extra global data to run our planning model:</p>\n<p></p>\n<ul>\n<li>a blend price (supposedly flat),</li>\n</ul>\n<ul>\n<li>a maximum number of worked mines for any given years (typically 3), and</li>\n</ul>\n<ul>\n<li>a discount rate to compute the actualized revenue over the horizon.</li>\n</ul>\n<p></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# global data\nblend_price = 10\nmax_worked_mines = 3  # work no more than 3 mines each year\ndiscount_rate = 0.10  # 10% interest rate each year", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 3: Prepare the data\nThe data is clean and does not need any cleansing.", "apps": [], "results": {"msg": [{"data": "<h3>Step 3: Prepare the data</h3>\n<p>The data is clean and does not need any cleansing.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 4: Set up the prescriptive model", "apps": [], "results": {"msg": [{"data": "<h3>Step 4: Set up the prescriptive model</h3>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.environment import Environment\nenv = Environment()\nenv.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Create DOcplex model\nThe model contains all the business constraints and defines the objective.", "apps": [], "results": {"msg": [{"data": "<h4>Create DOcplex model</h4>\n<p>The model contains all the business constraints and defines the objective.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nfrom docplex.mp.model import Model\n\nmm = Model(\"mining_pandas\")", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nWhat are the decisions we need to make?\n\n * What mines do we work each year? (a yes/no decision)\n * What mine do we keep open each year? (again a yes/no decision)\n * What quantity is extracted from each mine, each year? (a positive number)\n \n We need to define some decision variables and add constraints to our model related to these decisions.\n ", "apps": [], "results": {"msg": [{"data": "<p>What are the decisions we need to make?</p>\n<p></p>\n<ul>\n<li>What mines do we work each year? (a yes/no decision)</li>\n</ul>\n<ul>\n<li>What mine do we keep open each year? (again a yes/no decision)</li>\n</ul>\n<ul>\n<li>What quantity is extracted from each mine, each year? (a positive number)</li>\n</ul>\n<p></p>\n<p>We need to define some decision variables and add constraints to our model related to these decisions.</p>\n<p></p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Define the decision variables", "apps": [], "results": {"msg": [{"data": "<h4>Define the decision variables</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# auxiliary data: ranges\nrange_mines = range(nb_mines)\nrange_years = range(nb_years)\n\n# binary decisions: work the mine or not\nwork_vars  = mm.binary_var_matrix(keys1=range_mines, keys2=range_years, name='work')\n# open the mine or not\nopen_vars  = mm.binary_var_matrix(range_mines, range_years, name='open')\n# quantity to extract\nore_vars   = mm.continuous_var_matrix(range_mines, range_years, name='ore')\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the business constraints\n##### Constraint 1: Only open mines can be worked.\nIn order to take advantage of the *pandas* operations to create the optimization model, decision variables are organized in a DataFrame which is automatically indexed by *'range_mines'* and *'range_years'* (that is, the same keys as the dictionary created by the *binary_var_matrix()* method).", "apps": [], "results": {"msg": [{"data": "<h4>Express the business constraints</h4>\n<h5>Constraint 1: Only open mines can be worked.</h5>\n<p>In order to take advantage of the <em>pandas</em> operations to create the optimization model, decision variables are organized in a DataFrame which is automatically indexed by <em>'range_mines'</em> and <em>'range_years'</em> (that is, the same keys as the dictionary created by the <em>binary_var_matrix()</em> method).</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Organize all decision variables in a DataFrame indexed by 'range_mines' and 'range_years'\ndf_decision_vars = DataFrame({'work': work_vars, 'open': open_vars, 'ore': ore_vars})\n# Set index names\ndf_decision_vars.index.names=['range_mines', 'range_years']\n\n# Display rows of 'df_decision_vars' DataFrame for first mine\ndf_decision_vars[:nb_years]", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nNow, let's iterate over rows of the DataFrame *\"df_decision_vars\"* and enforce the desired constraints.\n\nThe *pandas* method *itertuples()* returns a named tuple for each row of a DataFrame. This method is efficient and convenient for iterating over all rows.", "apps": [], "results": {"msg": [{"data": "<p>Now, let's iterate over rows of the DataFrame <em>\"df_decision_vars\"</em> and enforce the desired constraints.</p>\n<p></p>\n<p>The <em>pandas</em> method <em>itertuples()</em> returns a named tuple for each row of a DataFrame. This method is efficient and convenient for iterating over all rows.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmm.add_constraints(t.work <= t.open for t in df_decision_vars.itertuples())\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Constraint 2: Once closed, a mine stays closed.\n\nThese constraints are a little more complex: we state that the series of *open_vars[m,y]* for a given mine *_m_* is decreasing. In other terms, once some *open_vars[m,y]* is zero, all subsequent values for future years are also zero.\n\nLet's use the *pandas* *groupby* operation to collect all *\"open\"* decision variables for each mine in separate *pandas* Series.<br>\nThen, we iterate over the mines and invoke the *aggregate()* method, passing the *postOpenCloseConstraint()* function as the argument.<br>\nThe *pandas* *aggregate()* method invokes *postOpenCloseConstraint()* for each mine, passing the associated Series of *\"open\"* decision variables as argument.\nThe *postOpenCloseConstraint()* function posts a set of constraints on the sequence of *\"open\"* decision variables to enforce that a mine cannot re-open.", "apps": [], "results": {"msg": [{"data": "<h5>Constraint 2: Once closed, a mine stays closed.</h5>\n<p></p>\n<p>These constraints are a little more complex: we state that the series of <em>open_vars[m,y]</em> for a given mine <em>_m_</em> is decreasing. In other terms, once some <em>open_vars[m,y]</em> is zero, all subsequent values for future years are also zero.</p>\n<p></p>\n<p>Let's use the <em>pandas</em> <em>groupby</em> operation to collect all <em>\"open\"</em> decision variables for each mine in separate <em>pandas</em> Series.<br></p>\n<p>Then, we iterate over the mines and invoke the <em>aggregate()</em> method, passing the <em>postOpenCloseConstraint()</em> function as the argument.<br></p>\n<p>The <em>pandas</em> <em>aggregate()</em> method invokes <em>postOpenCloseConstraint()</em> for each mine, passing the associated Series of <em>\"open\"</em> decision variables as argument.</p>\n<p>The <em>postOpenCloseConstraint()</em> function posts a set of constraints on the sequence of <em>\"open\"</em> decision variables to enforce that a mine cannot re-open.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Once closed, a mine stays closed\ndef postOpenCloseConstraint(open_vars):\n    mm.add_constraints(open_next <= open_curr\n                      for (open_next, open_curr) in zip(open_vars[1:], open_vars))\n    # Optionally: return a string to display information regarding the aggregate operation in the Output cell\n    return \"posted {0} open/close constraints\".format(len(open_vars) - 1)\n\n# Constraints on sequences of decision variables are posted for each mine, \n# using pandas' \"groupby\" operation.\ndf_decision_vars.open.groupby(level='range_mines').aggregate(postOpenCloseConstraint)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Constraint 3: The number of worked mines each year is limited.", "apps": [], "results": {"msg": [{"data": "<h5>Constraint 3: The number of worked mines each year is limited.</h5>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThis time, we use the *pandas* *groupby* operation to collect all *\"work\"* decision variables for each **year** in separate *pandas* Series. Each Series contains the *\"work\"* decision variables for all mines.\nThen, the maximum number of worked mines constraint is enforced by making sure that the sum of all the terms of each Series is smaller or equal to the maximum number of worked mines.<br>\nThe *aggregate()* method is used to post this constraint for each *year*.", "apps": [], "results": {"msg": [{"data": "<p>This time, we use the <em>pandas</em> <em>groupby</em> operation to collect all <em>\"work\"</em> decision variables for each <strong>year</strong> in separate <em>pandas</em> Series. Each Series contains the <em>\"work\"</em> decision variables for all mines.</p>\n<p>Then, the maximum number of worked mines constraint is enforced by making sure that the sum of all the terms of each Series is smaller or equal to the maximum number of worked mines.<br></p>\n<p>The <em>aggregate()</em> method is used to post this constraint for each <em>year</em>.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Maximum number of worked mines each year\n# Note that Model.sum() accepts a pandas Series of variables.\ndf_decision_vars.work.groupby(level='range_years').aggregate(\n    lambda works: mm.add_constraint(mm.sum(works) <= max_worked_mines))", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Constraint 4: The quantity extracted is limited.\n\nThis constraint expresses two things:\n  * Only a worked mine can give ore. (Note that there is no minimum on the quantity extracted, this model is very simplified).\n  * The quantity extracted is less than the mine's maximum extracted quantity.", "apps": [], "results": {"msg": [{"data": "<h5>Constraint 4: The quantity extracted is limited.</h5>\n<p></p>\n<p>This constraint expresses two things:</p>\n<ul>\n<li>Only a worked mine can give ore. (Note that there is no minimum on the quantity extracted, this model is very simplified).</li>\n</ul>\n<ul>\n<li>The quantity extracted is less than the mine's maximum extracted quantity.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nTo illustrate the *pandas* *join* operation, let's build a DataFrame that joins the *\"df_decision_vars\"* DataFrame and the *\"df_mines.max_extract\"* Series such that each row contains the information to enforce the quantity extracted limit constraint.<br>\nThe default behaviour of the *pandas* *join* operation is to look at the index of *left* DataFrame and to append columns of the *right* Series or DataFrame which have same index.<br>\nHere is the result of this operation in our case:", "apps": [], "results": {"msg": [{"data": "<p>To illustrate the <em>pandas</em> <em>join</em> operation, let's build a DataFrame that joins the <em>\"df_decision_vars\"</em> DataFrame and the <em>\"df_mines.max_extract\"</em> Series such that each row contains the information to enforce the quantity extracted limit constraint.<br></p>\n<p>The default behaviour of the <em>pandas</em> <em>join</em> operation is to look at the index of <em>left</em> DataFrame and to append columns of the <em>right</em> Series or DataFrame which have same index.<br></p>\n<p>Here is the result of this operation in our case:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Display rows of 'df_decision_vars' joined with 'df_mines.max_extract' Series for first two mines\ndf_decision_vars.join(df_mines.max_extract)[:(nb_years * 2)]", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nNow, the constraint to limit quantity extracted is easily created by iterating over all rows of the joined DataFrames:", "apps": [], "results": {"msg": [{"data": "<p>Now, the constraint to limit quantity extracted is easily created by iterating over all rows of the joined DataFrames:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# quantity extracted is limited\nmm.add_constraints(t.ore <= t.max_extract * t.work\n                  for t in df_decision_vars.join(df_mines.max_extract).itertuples())\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Blend constraints\n\nWe need to compute the total production of each year, stored in auxiliary variables.", "apps": [], "results": {"msg": [{"data": "<h5>Blend constraints</h5>\n<p></p>\n<p>We need to compute the total production of each year, stored in auxiliary variables.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nAgain, we use the *pandas* *groupby* operation, this time to collect all *\"ore\"* decision variables for each **year** in separate *pandas* Series.<br>\nThe *\"blend\"* variable for a given year is the sum of *\"ore\"* decision variables for the corresponding Series.", "apps": [], "results": {"msg": [{"data": "<p>Again, we use the <em>pandas</em> <em>groupby</em> operation, this time to collect all <em>\"ore\"</em> decision variables for each <strong>year</strong> in separate <em>pandas</em> Series.<br></p>\n<p>The <em>\"blend\"</em> variable for a given year is the sum of <em>\"ore\"</em> decision variables for the corresponding Series.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# blend variables\nblend_vars = mm.continuous_var_list(nb_years, name='blend')\n\n# define blend variables as sum of extracted quantities\nmm.add_constraints(mm.sum(ores.values) == blend_vars[year]\n                 for year, ores in df_decision_vars.ore.groupby(level='range_years'))\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Minimum average blend quality constraint\n\nThe average quality of the blend is the weighted sum of extracted quantities, divided by the total extracted quantity. Because we cannot use division here, we transform the inequality:", "apps": [], "results": {"msg": [{"data": "<h5>Minimum average blend quality constraint</h5>\n<p></p>\n<p>The average quality of the blend is the weighted sum of extracted quantities, divided by the total extracted quantity. Because we cannot use division here, we transform the inequality:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Quality requirement on blended ore\nmm.add_constraints(mm.sum(ores.values * df_mines.ore_quality) >= blend_qualities[year] * blend_vars[year]\n                 for year, ores in df_decision_vars.ore.groupby(level='range_years'))\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### KPIs and objective\n\nSince both revenues and royalties are actualized using the same rate, we compute an auxiliary discount rate array.\n\n##### The discount rate array", "apps": [], "results": {"msg": [{"data": "<h4>KPIs and objective</h4>\n<p></p>\n<p>Since both revenues and royalties are actualized using the same rate, we compute an auxiliary discount rate array.</p>\n<p></p>\n<h5>The discount rate array</h5>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nactualization = 1.0 - discount_rate\nassert actualization > 0\nassert actualization <= 1\n#\ns_discounts = Series((actualization ** y for y in range_years), index=range_years, name='discounts')\ns_discounts.index.name='range_years'\n# e.g. [1, 0.9, 0.81, ... 0.9**y...]\nprint(s_discounts)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Total actualized revenue\n\nTotal expected revenue is the sum of actualized yearly revenues, computed as total extracted quantities multiplied by the blend price (assumed to be constant over the years in this simplified model).", "apps": [], "results": {"msg": [{"data": "<h5>Total actualized revenue</h5>\n<p></p>\n<p>Total expected revenue is the sum of actualized yearly revenues, computed as total extracted quantities multiplied by the blend price (assumed to be constant over the years in this simplified model).</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nexpected_revenue = blend_price * mm.dot(blend_vars, s_discounts)\nmm.add_kpi(expected_revenue, \"Total Actualized Revenue\");", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n##### Total actualized royalty cost\n\nThe total actualized royalty cost is computed for all open mines, also actualized using the discounts array.", "apps": [], "results": {"msg": [{"data": "<h5>Total actualized royalty cost</h5>\n<p></p>\n<p>The total actualized royalty cost is computed for all open mines, also actualized using the discounts array.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThis time, we use the *pandas* *join* operation twice to build a DataFrame that joins the *\"df_decision_vars\"* DataFrame with the *\"df_mines.royalties\"* and *\"s_discounts\"* Series such that each row contains the relevant information to calculate its contribution to the total actualized royalty cost.<br>\nThe join with the *\"df_mines.royalties\"* Series is performed by looking at the common *\"range_mines\"* index, while the join with the *\"s_discounts\"* Series is performed by looking at the common *\"range_years\"* index.", "apps": [], "results": {"msg": [{"data": "<p>This time, we use the <em>pandas</em> <em>join</em> operation twice to build a DataFrame that joins the <em>\"df_decision_vars\"</em> DataFrame with the <em>\"df_mines.royalties\"</em> and <em>\"s_discounts\"</em> Series such that each row contains the relevant information to calculate its contribution to the total actualized royalty cost.<br></p>\n<p>The join with the <em>\"df_mines.royalties\"</em> Series is performed by looking at the common <em>\"range_mines\"</em> index, while the join with the <em>\"s_discounts\"</em> Series is performed by looking at the common <em>\"range_years\"</em> index.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ndf_royalties_data = df_decision_vars.join(df_mines.royalties).join(s_discounts)\n# add a new column to compute discounted roylaties using pandas multiplication on columns\ndf_royalties_data['disc_royalties'] = df_royalties_data['royalties'] * df_royalties_data['discounts']\ndf_royalties_data[:nb_years]", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe total royalty is now calculated by multiplying the columns *\"open\"*, *\"royalties\"* and *\"discounts\"*, and to sum over all rows.<br>\nUsing *pandas* constructs, this can be written in a very compact way as follows:", "apps": [], "results": {"msg": [{"data": "<p>The total royalty is now calculated by multiplying the columns <em>\"open\"</em>, <em>\"royalties\"</em> and <em>\"discounts\"</em>, and to sum over all rows.<br></p>\n<p>Using <em>pandas</em> constructs, this can be written in a very compact way as follows:</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\ntotal_royalties = mm.dot(df_royalties_data.open, df_royalties_data.disc_royalties)\n\nmm.add_kpi(total_royalties, \"Total Actualized Royalties\");", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Express the objective\n\nThe business objective is to maximize the expected net profit, which is the difference between revenue and royalties.", "apps": [], "results": {"msg": [{"data": "<h4>Express the objective</h4>\n<p></p>\n<p>The business objective is to maximize the expected net profit, which is the difference between revenue and royalties.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmm.maximize(expected_revenue - total_royalties)", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Solve with Decision Optimization\n", "apps": [], "results": {"msg": [{"data": "<h4>Solve with Decision Optimization</h4>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmm.print_information()\n# turn this flag on to see the solve log\nprint_cplex_log = False\n# start the solve\ns1 = mm.solve(log_output=print_cplex_log)\nassert s1, \"!!! Solve of the model fails\"\nmm.report()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n### Step 5: Investigate the solution and then run an example analysis\n\nTo analyze the results, we again leverage pandas, by storing the solution value of the _ore_ variables in a new DataFrame.\nNote that we use the _float_ function of Python to convert the variable to its solution value. Of course, this requires that the model be successfully solved.<br>\nFor convenience, we want to organize the _ore_ solution values in a pivot table with *years* as row index and *mines* as columns. The *pandas* *unstack* operation does this for us.", "apps": [], "results": {"msg": [{"data": "<h3>Step 5: Investigate the solution and then run an example analysis</h3>\n<p></p>\n<p>To analyze the results, we again leverage pandas, by storing the solution value of the <em>ore</em> variables in a new DataFrame.</p>\n<p>Note that we use the <em>float</em> function of Python to convert the variable to its solution value. Of course, this requires that the model be successfully solved.<br></p>\n<p>For convenience, we want to organize the <em>ore</em> solution values in a pivot table with <em>years</em> as row index and <em>mines</em> as columns. The <em>pandas</em> <em>unstack</em> operation does this for us.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmine_labels = [(\"mine%d\" % (m+1)) for m in range_mines]\nylabels = [(\"y%d\" % (y+1)) for y in range_years]\n\n# Add a column to DataFrame containing 'ore' decision variables value\n# Note that we extract the solution values of ore variables in one operation with get_values().\ndf_decision_vars['ore_values'] = s1.get_values(df_decision_vars.ore)\n\n# Create a pivot table by (years, mines), using pandas' \"unstack\" method to transform the 'range_mines' row index\n#  into columns\ndf_res = df_decision_vars.ore_values.unstack(level='range_mines')\n\n# Set user-friendly labels for column and row indices\ndf_res.columns = mine_labels\ndf_res.index = ylabels\n\ndf_res", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n#### Visualize results\n\nIn this section you'll need the *matplotlib* module to visualize the results of the solve.", "apps": [], "results": {"msg": [{"data": "<h4>Visualize results</h4>\n<p></p>\n<p>In this section you'll need the <em>matplotlib</em> module to visualize the results of the solve.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# import matplotlib library for visualization\nimport matplotlib.pyplot as plt\n# matplotlib graphics are printed -inside- the notebook\n\ndf_res.plot(kind=\"bar\", figsize=(10,4.5))\nplt.xlabel(\"year\")\nplt.ylabel(\"ore\")\nplt.title('ore values per year');", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Adding operational constraints.\n\nWhat if we wish to add operational constraints? For example, let us forbid work on certain pairs of (mines, years). Let's see how this impacts profit.\n\nFirst, we add extra constraints to forbid work on those tuples.", "apps": [], "results": {"msg": [{"data": "<h2>Adding operational constraints.</h2>\n<p></p>\n<p>What if we wish to add operational constraints? For example, let us forbid work on certain pairs of (mines, years). Let's see how this impacts profit.</p>\n<p></p>\n<p>First, we add extra constraints to forbid work on those tuples.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# a list of (mine, year) tuples on which work is not possible.\nforced_stops = [(1, 2), (0, 1), (1, 0), (3, 2), (2, 3), (3, 4)]\n\nmm.add_constraints(work_vars[stop_m, stop_y] == 0 \n                   for stop_m, stop_y in forced_stops)\nmm.print_information()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThe previous solution does not satisfy these constraints; for example (0, 1) means mine 1 should not be worked on year 2, but it was in fact worked in the above solution.\n\nTo help CPLEX find a feasible solution, we will build a heuristic feasible solution and pass it to CPLEX.", "apps": [], "results": {"msg": [{"data": "<p>The previous solution does not satisfy these constraints; for example (0, 1) means mine 1 should not be worked on year 2, but it was in fact worked in the above solution.</p>\n<p></p>\n<p>To help CPLEX find a feasible solution, we will build a heuristic feasible solution and pass it to CPLEX.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Using an heuristic start solution\n\nIn this section, we show how one can provide a start solution to CPLEX, based on heuristics.\n\nFirst, we build a solution in which mines are worked whenever possible, that is for all couples *(m,y)* except for those in *forced_stops*.", "apps": [], "results": {"msg": [{"data": "<h2>Using an heuristic start solution</h2>\n<p></p>\n<p>In this section, we show how one can provide a start solution to CPLEX, based on heuristics.</p>\n<p></p>\n<p>First, we build a solution in which mines are worked whenever possible, that is for all couples <em>(m,y)</em> except for those in <em>forced_stops</em>.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# build a new, empty solution\nfull_mining = mm.new_solution()\n\n# define the worked \nfor m in range_mines:\n    for y in range_years:\n        if (m,y) not in forced_stops:\n            full_mining.add_var_value(work_vars[m,y], 1)\n#full_mining.display()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nThen we pass this solution to the model as a MIP start solution and re-solve,\nthis time with CPLEX logging turned on.", "apps": [], "results": {"msg": [{"data": "<p>Then we pass this solution to the model as a MIP start solution and re-solve,</p>\n<p>this time with CPLEX logging turned on.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\nmm.add_mip_start(full_mining)\ns2 = mm.solve(log_output=True)  # turns on CPLEX logging\nassert s2, \"solve failed\"\nmm.report()", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nYou can see in the CPLEX log above, that our MIP start solution provided a good start for CPLEX, defining an initial solution with objective 157.9355\n\nNow we can again visualize the results with *pandas* and *matplotlib*.", "apps": [], "results": {"msg": [{"data": "<p>You can see in the CPLEX log above, that our MIP start solution provided a good start for CPLEX, defining an initial solution with objective 157.9355</p>\n<p></p>\n<p>Now we can again visualize the results with <em>pandas</em> and <em>matplotlib</em>.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%python\n# Add a column to DataFrame containing 'ore' decision variables value and create a pivot table by (years, mines)\ndf_decision_vars['ore_values2'] = s2.get_values(df_decision_vars.ore)\ndf_res2 = df_decision_vars.ore_values2.unstack(level='range_mines')\ndf_res2.columns = mine_labels\ndf_res2.index = ylabels\n\ndf_res2.plot(kind=\"bar\", figsize=(10,4.5))\nplt.xlabel(\"year\")\nplt.ylabel(\"ore\")\nplt.title('ore values per year - what-if scenario');", "apps": [], "results": {"msg": [{"data": "", "type": "ANGULAR"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": false, "language": "python"}, "editorMode": "ace/mode/python", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nAs expected, mine1 is not worked in year 2: there is no blue bar at y2.", "apps": [], "results": {"msg": [{"data": "<p>As expected, mine1 is not worked in year 2: there is no blue bar at y2.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## Summary\n\nYou learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with CPLEX.", "apps": [], "results": {"msg": [{"data": "<h2>Summary</h2>\n<p></p>\n<p>You learned how to set up and use IBM Decision Optimization CPLEX Modeling for Python to formulate a Mathematical Programming model and solve it with CPLEX.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\n## References\n* [CPLEX Modeling for Python documentation](https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html)\n* [Decision Optimization on Cloud](https://developer.ibm.com/docloud/)\n* Need help with DOcplex or to report a bug? Please go [here](https://developer.ibm.com/answers/smartspace/docloud).\n* Contact us at dofeedback@wwpdl.vnet.ibm.com.", "apps": [], "results": {"msg": [{"data": "<h2>References</h2>\n<ul>\n<li><a href=\"https://rawgit.com/IBMDecisionOptimization/docplex-doc/master/docs/index.html\">CPLEX Modeling for Python documentation</a></li>\n</ul>\n<ul>\n<li><a href=\"https://developer.ibm.com/docloud/\">Decision Optimization on Cloud</a></li>\n</ul>\n<ul>\n<li>Need help with DOcplex or to report a bug? Please go <a href=\"https://developer.ibm.com/answers/smartspace/docloud\">here</a>.</li>\n</ul>\n<ul>\n<li>Contact us at dofeedback@wwpdl.vnet.ibm.com.</li>\n</ul>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}, {"settings": {"forms": {}, "params": {}}, "text": "%md\nCopyright \u00a9 2017 IBM. IPLA licensed Sample Materials.", "apps": [], "results": {"msg": [{"data": "<p>Copyright \u00a9 2017 IBM. IPLA licensed Sample Materials.</p>\n", "type": "HTML"}], "code": "SUCCESS"}, "user": "anonymous", "config": {"editorSetting": {"editOnDblClick": true, "language": "markdown"}, "editorMode": "ace/mode/markdown", "colWidth": 12, "enabled": true, "results": {}}}]}